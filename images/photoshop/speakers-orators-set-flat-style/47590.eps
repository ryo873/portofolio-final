%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1506.m00.i121.n057.S.c12.153531818 Speaker or orator icon in black and flat style.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 6/25/2015
%%BoundingBox: 0 0 381 387
%%HiResBoundingBox: 0 0 380.6774 386.3513
%%CropBox: 0 0 380.6774 386.3513
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2015-06-24T23:16:31+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-06-24T23:16:30+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-06-24T23:16:31+03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq8h/wCc&#xA;iPzQ1Hyholppmiy+hrGr8/8AShQtBbx0DMtejuzUU9t+9MVfJV9qF/f3DXN9cy3dy+7zTu0jn5sx&#xA;JOKsq/Lv80fM3krV7e4tLuWXSw6/XNMZy0MkVfiCoTxV6fZYfqxV9y21zBdW0VzbuJIJ0WSGRejI&#xA;45Kw+YOKqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8uf85IfmprcvmWbylpN3Jaabp6qt+YGK&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:0A12935F841AE5119092AA92486A4A7B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0A12935F841AE5119092AA92486A4A7B</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:71014e2a-37b2-4548-82cc-6ea99ecca0e4</stRef:instanceID>
            <stRef:documentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0A12935F841AE5119092AA92486A4A7B</stEvt:instanceID>
                  <stEvt:when>2015-06-24T23:16:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -386.351 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 386.351 li
380.677 386.351 li
380.677 0 li
cp
clp
294.602 302.896 mo
298.036 302.896 li
298.067 302.758 li
294.602 302.758 li
294.602 302.896 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
296.833 264.332 mo
300.293 292.751 li
308.617 253.638 li
300.293 263.901 li
297.857 258.897 li
297.864 258.974 297.883 259.036 297.883 259.124 cv
296.833 264.332 li
cp
.729412 .65098 .498039 rgb
f
304.339 251.616 mo
300.881 254.313 298.192 255.872 294.602 255.912 cv
294.602 257.82 li
294.728 257.823 294.853 257.826 294.984 257.826 cv
296.033 257.826 296.947 257.708 297.456 258.073 cv
297.447 258.056 li
297.456 258.073 li
297.678 258.233 297.816 258.497 297.857 258.897 cv
300.293 263.901 li
308.617 253.638 li
308.619 253.627 li
308.621 253.627 308.624 253.628 308.626 253.628 cv
308.649 253.599 li
305.489 250.369 li
305.152 250.837 304.784 251.269 304.339 251.616 cv
cp
.972549 .87451 .647059 rgb
f
308.68 253.631 mo
308.649 253.599 li
308.626 253.628 li
308.641 253.628 308.664 253.63 308.68 253.631 cv
cp
.619608 .768627 .835294 rgb
f
294.602 302.758 mo
291.588 302.758 li
291.618 302.896 li
294.602 302.896 li
294.602 302.758 li
cp
1 1 1 rgb
f
310.997 344.347 mo
310.997 337.887 303.716 332.635 294.602 332.366 cv
294.602 356.326 li
303.716 356.057 310.997 350.804 310.997 344.347 cv
cp
.737255 .901961 .945098 rgb
f
260.996 284.934 mo
261.697 284.948 262.35 284.588 262.603 283.97 cv
266.405 274.695 li
266.735 273.887 266.256 272.956 265.339 272.616 cv
264.419 272.273 263.408 272.65 263.073 273.457 cv
259.273 282.735 li
259.077 283.208 259.168 283.723 259.461 284.139 cv
256.724 290.921 255.598 294.98 254.772 301.429 cv
256.511 301.429 li
257.307 295.328 258.407 291.374 260.996 284.934 cv
cp
.882353 .901961 .941176 rgb
f
276.629 284.902 mo
277.331 284.841 277.943 284.413 278.129 283.773 cv
280.938 274.149 li
281.184 273.313 280.609 272.437 279.658 272.195 cv
278.709 271.949 277.741 272.429 277.495 273.265 cv
274.688 282.891 li
274.544 283.385 274.688 283.888 275.021 284.271 cv
273.065 291.108 272.354 295.225 272.182 301.429 cv
273.907 301.429 li
274.078 295.47 274.766 291.451 276.629 284.902 cv
cp
f
292.079 259.124 mo
292.079 257.659 293.182 257.789 294.602 257.82 cv
294.602 255.912 li
294.555 255.912 294.513 255.919 294.466 255.919 cv
290.778 255.919 288.468 254.834 284.99 251.999 cv
284.643 251.717 284.343 251.382 284.075 251.008 cv
281.17 253.365 li
289.222 263.901 li
292.079 259.124 li
cp
.984314 .933333 .823529 rgb
f
293.054 264.332 mo
292.079 259.124 li
289.222 263.901 li
281.17 253.365 li
280.847 253.627 li
289.222 292.266 li
293.054 264.332 li
cp
.972549 .87451 .647059 rgb
f
329.496 284.139 mo
329.786 283.723 329.878 283.208 329.683 282.735 cv
325.881 273.457 li
325.548 272.65 324.536 272.273 323.615 272.616 cv
322.699 272.956 322.221 273.887 322.55 274.695 cv
326.353 283.97 li
326.606 284.588 327.259 284.948 327.96 284.934 cv
330.548 291.374 331.648 295.328 332.444 301.429 cv
334.183 301.429 li
333.357 294.98 332.231 290.921 329.496 284.139 cv
cp
.882353 .901961 .941176 rgb
f
276.751 344.347 mo
276.751 350.976 284.418 356.352 293.874 356.352 cv
294.119 356.352 294.359 356.334 294.602 356.326 cv
294.602 332.366 li
294.359 332.359 294.119 332.341 293.874 332.341 cv
284.418 332.341 276.751 337.715 276.751 344.347 cv
cp
1 1 1 rgb
f
313.935 284.271 mo
314.267 283.888 314.412 283.385 314.267 282.891 cv
311.46 273.265 li
311.214 272.429 310.245 271.949 309.295 272.195 cv
308.344 272.437 307.771 273.313 308.016 274.149 cv
310.827 283.773 li
311.012 284.413 311.623 284.841 312.326 284.902 cv
314.189 291.451 314.878 295.47 315.048 301.429 cv
316.774 301.429 li
316.602 295.225 315.891 291.108 313.935 284.271 cv
cp
.882353 .901961 .941176 rgb
f
257.583 324.597 mo
258.262 333.66 li
264.123 386.351 li
271.78 386.351 li
265.629 324.597 li
257.583 324.597 li
cp
.4 .478431 .54902 rgb
f
294.602 324.597 mo
294.602 332.366 li
303.716 332.635 310.997 337.887 310.997 344.347 cv
310.997 350.804 303.716 356.057 294.602 356.326 cv
294.602 386.351 li
314.586 386.351 li
320.751 324.597 li
294.602 324.597 li
cp
.498039 .572549 .647059 rgb
f
293.874 356.352 mo
284.418 356.352 276.751 350.976 276.751 344.347 cv
276.751 337.715 284.418 332.341 293.874 332.341 cv
294.119 332.341 294.359 332.359 294.602 332.366 cv
294.602 324.597 li
268.453 324.597 li
274.616 386.351 li
294.602 386.351 li
294.602 356.326 li
294.359 356.334 294.119 356.352 293.874 356.352 cv
cp
.596078 .662745 .737255 rgb
f
265.629 324.597 mo
271.78 386.351 li
274.616 386.351 li
268.453 324.597 li
265.629 324.597 li
cp
.113725 .113725 .113725 rgb
f
265.629 324.597 mo
268.453 324.597 li
294.602 324.597 li
294.602 323.759 li
294.602 302.758 li
291.588 302.758 li
210.459 302.758 li
231.022 334.948 li
232.693 334.948 li
258.359 334.948 li
258.262 333.66 li
257.583 324.597 li
265.629 324.597 li
cp
.313726 .392157 .45098 rgb
f
323.574 324.597 mo
317.421 386.351 li
325.344 386.351 li
331.207 333.626 li
331.884 324.597 li
323.574 324.597 li
cp
.231373 .298039 .341176 rgb
f
321.751 324.597 mo
320.751 324.597 li
314.586 386.351 li
317.421 386.351 li
323.574 324.597 li
321.751 324.597 li
cp
.113725 .113725 .113725 rgb
f
298.067 302.758 mo
294.602 302.758 li
294.602 323.759 li
294.602 324.597 li
320.751 324.597 li
321.751 324.597 li
323.574 324.597 li
331.884 324.597 li
331.207 333.626 li
331.108 334.948 li
357.178 334.948 li
357.584 334.948 li
380.677 302.526 li
298.067 302.758 li
cp
.160784 .207843 .235294 rgb
f
297.456 258.073 mo
297.857 258.897 li
297.816 258.497 297.678 258.233 297.456 258.073 cv
cp
0 0 0 rgb
f
300.293 292.751 mo
296.833 264.332 li
297.883 259.124 li
297.883 259.036 297.864 258.974 297.857 258.897 cv
297.456 258.073 li
296.947 257.708 296.033 257.826 294.984 257.826 cv
294.853 257.826 294.728 257.823 294.602 257.82 cv
294.602 301.429 li
294.602 302.758 li
298.067 302.758 li
298.362 301.429 li
300.293 292.751 li
cp
.227451 .0235294 .0313726 rgb
f
300.293 292.752 mo
300.297 292.733 li
300.293 292.751 li
300.293 292.752 li
cp
.258824 .258824 .258824 rgb
f
308.617 253.638 mo
300.297 292.733 li
300.293 292.752 li
300.293 292.751 li
298.067 302.758 li
310.941 302.758 li
310.941 301.429 li
315.048 301.429 li
314.878 295.47 314.189 291.451 312.326 284.902 cv
311.623 284.841 311.012 284.413 310.827 283.773 cv
308.016 274.149 li
307.771 273.313 308.344 272.437 309.295 272.195 cv
310.245 271.949 311.214 272.429 311.46 273.265 cv
314.267 282.891 li
314.412 283.385 314.267 283.888 313.935 284.271 cv
315.891 291.108 316.602 295.225 316.774 301.429 cv
321.233 301.429 li
321.233 302.758 li
327.874 302.758 li
327.874 301.429 li
332.444 301.429 li
331.648 295.328 330.548 291.374 327.96 284.934 cv
327.259 284.948 326.606 284.588 326.353 283.97 cv
322.55 274.695 li
322.221 273.887 322.699 272.956 323.615 272.616 cv
324.536 272.273 325.548 272.65 325.881 273.457 cv
329.683 282.735 li
329.878 283.208 329.786 283.723 329.496 284.139 cv
332.231 290.921 333.357 294.98 334.183 301.429 cv
338.166 301.429 li
338.166 302.758 li
341.389 302.758 li
341.205 301.429 li
336.078 264.546 li
336.078 261.314 331.986 258.562 321.456 256.082 cv
315.824 254.681 310.516 253.811 308.988 253.655 cv
308.936 253.892 li
308.68 253.631 li
308.664 253.63 308.641 253.628 308.626 253.628 cv
308.617 253.638 li
cp
.54902 .384314 .223529 rgb
f
308.626 253.628 mo
308.624 253.628 308.621 253.627 308.619 253.627 cv
308.617 253.638 li
308.626 253.628 li
cp
f
298.362 301.429 mo
298.067 302.758 li
300.293 292.751 li
298.362 301.429 li
cp
f
308.988 253.655 mo
308.858 253.641 308.753 253.633 308.68 253.631 cv
308.936 253.892 li
308.988 253.655 li
cp
f
291.288 301.429 mo
291.588 302.758 li
291.288 301.429 li
291.288 301.429 li
cp
.258824 .258824 .258824 rgb
f
289.226 292.284 mo
289.226 292.284 li
289.222 292.266 li
280.847 253.627 li
280.847 253.627 280.734 253.652 280.528 253.697 cv
279.087 254.012 273.027 255.317 268.011 256.082 cv
257.687 257.826 254.017 260.446 253.385 264.546 cv
248.262 301.429 li
248.078 302.758 li
250.847 302.758 li
250.847 301.429 li
254.772 301.429 li
255.598 294.98 256.724 290.921 259.461 284.139 cv
259.168 283.723 259.077 283.208 259.273 282.735 cv
263.073 273.457 li
263.408 272.65 264.419 272.273 265.339 272.616 cv
266.256 272.956 266.735 273.887 266.405 274.695 cv
262.603 283.97 li
262.35 284.588 261.697 284.948 260.996 284.934 cv
258.407 291.374 257.307 295.328 256.511 301.429 cv
261.138 301.429 li
261.138 302.758 li
267.779 302.758 li
267.779 301.429 li
272.182 301.429 li
272.354 295.225 273.065 291.108 275.021 284.271 cv
274.688 283.888 274.544 283.385 274.688 282.891 cv
277.495 273.265 li
277.741 272.429 278.709 271.949 279.658 272.195 cv
280.609 272.437 281.184 273.313 280.938 274.149 cv
278.129 283.773 li
277.943 284.413 277.331 284.841 276.629 284.902 cv
274.766 291.451 274.078 295.47 273.907 301.429 cv
278.071 301.429 li
278.071 302.758 li
291.588 302.758 li
291.288 301.429 li
289.226 292.284 li
cp
.776471 .611765 .427451 rgb
f
292.079 259.124 mo
293.054 264.332 li
289.226 292.284 li
291.588 302.758 li
294.602 302.758 li
294.602 257.82 li
293.182 257.789 292.079 257.659 292.079 259.124 cv
cp
.380392 .0784314 .0901961 rgb
f
289.226 292.284 mo
289.226 292.284 li
289.222 292.266 li
289.226 292.284 li
cp
.258824 .258824 .258824 rgb
f
256.511 301.429 mo
254.772 301.429 li
250.847 301.429 li
250.847 302.758 li
254.609 302.758 li
256.345 302.758 li
261.138 302.758 li
261.138 301.429 li
256.511 301.429 li
cp
1 1 1 rgb
f
273.907 301.429 mo
272.182 301.429 li
267.779 301.429 li
267.779 302.758 li
272.153 302.758 li
273.878 302.758 li
278.071 302.758 li
278.071 301.429 li
273.907 301.429 li
cp
f
316.774 301.429 mo
315.048 301.429 li
310.941 301.429 li
310.941 302.758 li
315.078 302.758 li
316.802 302.758 li
321.233 302.758 li
321.233 301.429 li
316.774 301.429 li
cp
f
334.183 301.429 mo
332.444 301.429 li
327.874 301.429 li
327.874 302.758 li
332.61 302.758 li
334.345 302.758 li
338.166 302.758 li
338.166 301.429 li
334.183 301.429 li
cp
f
310.1 226.734 mo
310.097 226.58 310.098 226.417 310.094 226.265 cv
310.094 226.734 li
310.1 226.734 li
cp
.258824 .258824 .258824 rgb
f
310.112 230.154 mo
310.11 229.825 li
310.11 229.936 310.109 230.046 310.109 230.157 cv
310.11 230.156 310.111 230.156 310.112 230.154 cv
cp
.819608 .776471 .776471 rgb
f
310.105 228.774 mo
310.109 228.774 310.113 228.773 310.117 228.773 cv
310.117 228.657 310.12 228.542 310.12 228.429 cv
310.12 227.844 310.11 227.289 310.1 226.734 cv
310.094 226.734 li
310.105 228.774 li
cp
f
310.094 228.776 mo
310.098 228.775 310.101 228.775 310.105 228.774 cv
310.094 226.734 li
310.094 228.776 li
cp
f
294.602 229.925 mo
295.284 229.929 296.008 229.929 296.524 229.922 cv
296.526 229.918 296.527 229.91 296.529 229.904 cv
298.221 229.696 307.267 229.202 310.094 228.776 cv
310.094 226.734 li
310.094 226.265 li
309.77 211.642 305.975 206.398 294.602 206.354 cv
294.602 226.734 li
294.602 229.925 li
cp
.388235 .247059 .0941176 rgb
f
307.087 229.904 mo
307.289 230.301 307.446 230.74 307.491 231.218 cv
307.623 232.689 li
307.803 234.681 306.399 236.456 304.482 236.648 cv
300.473 237.056 li
298.557 237.255 296.857 235.795 296.675 233.803 cv
296.544 232.332 li
296.512 232.031 296.468 231.244 296.471 230.627 cv
295.85 230.635 295.225 230.625 294.602 230.624 cv
294.602 237.484 li
294.602 255.912 li
298.192 255.872 300.881 254.313 304.339 251.616 cv
304.784 251.269 305.152 250.837 305.489 250.369 cv
307.132 248.094 307.651 244.503 308.329 240.337 cv
309.206 240.031 310.291 239.011 311.296 237.484 cv
311.666 236.921 312.026 236.294 312.359 235.602 cv
313.657 232.907 312.884 229.957 311.65 229.613 cv
311.205 229.49 310.651 229.704 310.112 230.154 cv
310.111 230.156 310.11 230.156 310.109 230.157 cv
310.109 230.046 310.11 229.936 310.11 229.825 cv
310.109 229.467 li
310.104 229.468 310.099 229.469 310.094 229.469 cv
309.092 229.621 308.092 229.779 307.087 229.904 cv
cp
f
310.113 229.467 mo
310.111 229.467 310.11 229.467 310.109 229.467 cv
310.11 229.825 li
310.111 229.706 310.112 229.586 310.113 229.467 cv
cp
.196078 .0980392 .0313726 rgb
f
279.395 228.775 mo
282.186 229.197 284.988 229.502 287.801 229.697 cv
289.537 229.806 289.974 229.828 292.665 229.904 cv
292.665 229.906 293.587 229.919 294.602 229.925 cv
294.602 226.734 li
294.602 206.354 li
294.553 206.354 294.507 206.352 294.459 206.352 cv
284.133 206.352 279.445 212.388 279.386 226.734 cv
279.385 228.111 li
279.386 228.217 279.385 228.32 279.387 228.429 cv
279.389 228.542 279.393 228.659 279.395 228.775 cv
cp
.415686 .305882 .145098 rgb
f
284.99 251.999 mo
288.468 254.834 290.778 255.919 294.466 255.919 cv
294.513 255.919 294.555 255.912 294.602 255.912 cv
294.602 237.484 li
294.602 230.624 li
293.976 230.623 293.351 230.631 292.723 230.62 cv
292.731 231.238 292.682 232.029 292.655 232.332 cv
292.522 233.803 li
292.336 235.795 290.635 237.255 288.718 237.056 cv
284.711 236.648 li
282.795 236.456 281.39 234.681 281.576 232.689 cv
281.709 231.218 li
281.75 230.728 281.911 230.282 282.123 229.875 cv
281.214 229.762 280.315 229.615 279.414 229.478 cv
279.42 229.714 279.427 229.947 279.433 230.186 cv
279.416 230.172 279.4 230.161 279.382 230.149 cv
279.379 230.146 279.375 230.144 279.372 230.141 cv
278.836 229.7 278.289 229.49 277.846 229.613 cv
276.612 229.957 276.515 232.681 277.14 235.602 cv
277.298 236.345 277.518 236.963 277.775 237.484 cv
278.809 239.581 280.474 240.055 281.449 240.337 cv
282.136 244.807 282.436 248.719 284.075 251.008 cv
284.343 251.382 284.643 251.717 284.99 251.999 cv
cp
f
296.529 229.904 mo
296.527 229.91 296.526 229.918 296.524 229.922 cv
296.008 229.929 295.284 229.929 294.602 229.925 cv
294.602 230.624 li
295.225 230.625 295.85 230.635 296.471 230.627 cv
296.468 231.244 296.512 232.031 296.544 232.332 cv
296.675 233.803 li
296.857 235.795 298.557 237.255 300.473 237.056 cv
304.482 236.648 li
306.399 236.456 307.803 234.681 307.623 232.689 cv
307.491 231.218 li
307.446 230.74 307.454 230.407 307.317 229.875 cv
308.322 229.751 309.092 229.621 310.094 229.469 cv
310.099 229.469 310.104 229.468 310.109 229.467 cv
310.105 228.774 li
310.101 228.775 310.098 228.775 310.094 228.776 cv
307.267 229.202 298.221 229.696 296.529 229.904 cv
cp
0 0 0 rgb
f
279.414 229.478 mo
280.315 229.615 280.985 229.733 281.894 229.846 cv
281.832 230.348 281.75 230.728 281.709 231.218 cv
281.576 232.689 li
281.39 234.681 282.795 236.456 284.711 236.648 cv
288.718 237.056 li
290.635 237.255 292.336 235.795 292.522 233.803 cv
292.655 232.332 li
292.682 232.029 292.731 231.238 292.723 230.62 cv
293.351 230.631 293.976 230.623 294.602 230.624 cv
294.602 229.925 li
293.587 229.919 292.665 229.906 292.665 229.904 cv
289.957 229.848 289.629 229.817 287.801 229.697 cv
284.988 229.502 282.186 229.197 279.395 228.775 cv
279.393 228.659 279.389 228.542 279.387 228.429 cv
279.385 228.32 279.386 228.217 279.385 228.111 cv
279.385 228.111 279.42 229.714 279.414 229.478 cv
cp
.2 .2 .2 rgb
f
94.252 254.076 mo
86.4414 262.455 li
85.9336 261.503 li
83.8789 266.132 li
88.2734 302.697 li
96.125 255.009 li
96.1289 255.009 96.1387 255.011 96.1426 255.011 cv
94.252 254.076 li
cp
.52549 .784314 .890196 rgb
f
79.9512 266.132 mo
78.2676 261.47 li
78.2676 261.162 78.4609 260.706 78.7305 260.216 cv
77.416 262.455 li
69.457 254.076 li
67.2656 255.009 li
74.9043 302.612 li
79.9512 266.132 li
cp
.662745 .866667 .952941 rgb
f
83.875 255.013 mo
83.1836 255.067 82.7871 255.091 82.5215 255.098 cv
86.4414 262.455 li
94.957 253.32 li
92.082 249.213 li
89.9648 251.751 86.6543 254.799 83.875 255.013 cv
cp
.741176 .909804 .921569 rgb
f
78.7305 260.216 mo
78.8242 260.048 78.9258 259.877 79.0313 259.704 cv
81.7617 255.058 li
81.541 255.038 81.209 255.015 80.5156 255.013 cv
79.2129 255.009 74.7129 252.448 71.9883 249.707 cv
68.7559 253.338 li
77.416 262.455 li
78.7305 260.216 li
cp
.85098 .968627 1 rgb
f
118.014 285.254 mo
116.723 283.118 li
115.158 283.353 113.889 284.37 113.889 285.191 cv
113.738 285.191 li
114.553 286.539 li
114.816 287.179 116.244 288.374 116.973 288.358 cv
119.336 294.57 120.508 298.315 121.002 305.282 cv
122.574 305.282 li
121.75 298.306 121.17 295.036 118.246 287.784 cv
118.547 287.352 118.215 285.747 118.014 285.254 cv
cp
.996078 .901961 .65098 rgb
f
48.3086 286.539 mo
49.2832 284.927 li
49.0371 284.102 47.7051 283.204 46.1543 283.091 cv
44.8477 285.254 li
44.6465 285.747 44.0898 287.905 44.3945 288.338 cv
41.4766 295.573 40.6406 298.756 40.5059 305.282 cv
41.8438 305.282 li
42.168 298.54 42.7188 295.799 45.4922 288.898 cv
46.7871 288.811 48.0449 287.179 48.3086 286.539 cv
cp
f
101.994 285.417 mo
101.117 283.346 li
99.4805 283.299 97.9961 284.134 97.8438 284.972 cv
98.4199 286.335 li
98.6113 286.998 99.877 288.491 100.607 288.552 cv
102.604 295.573 103.109 298.837 103.244 305.282 cv
104.615 305.282 li
104.486 298.576 104.045 295.241 101.951 287.92 cv
102.297 287.521 102.145 285.93 101.994 285.417 cv
cp
f
62.6836 288.215 mo
63.4141 288.154 64.2481 286.998 64.4414 286.335 cv
65.1934 284.559 li
64.6797 283.817 63.2363 283.196 61.7324 283.368 cv
60.8672 285.417 li
60.7168 285.93 60.625 287.303 60.9707 287.701 cv
58.8789 295.016 58.3027 298.714 58.6465 305.282 cv
59.9922 305.282 li
59.75 299.123 60.0918 295.411 62.6836 288.215 cv
cp
f
99.0762 278.519 mo
98.8223 277.652 97.8164 277.151 96.8281 277.406 cv
95.8398 277.658 95.2441 278.568 95.4981 279.439 cv
97.3477 283.803 li
98.0352 282.987 99.3164 282.422 100.697 282.349 cv
99.0762 278.519 li
cp
1 1 1 rgb
f
69.4102 214.843 mo
69.3867 214.684 69.3379 214.7 69.4102 214.843 cv
69.4102 214.843 li
cp
f
67.3613 279.439 mo
67.6152 278.568 67.0195 277.658 66.0313 277.406 cv
65.0449 277.151 64.041 277.652 63.7832 278.519 cv
62.166 282.345 li
63.5293 282.328 64.8262 282.808 65.6211 283.552 cv
67.3613 279.439 li
cp
f
116.178 282.217 mo
114.063 278.717 li
113.717 277.881 112.666 277.489 111.709 277.844 cv
110.756 278.198 110.26 279.167 110.602 280.006 cv
113.162 284.239 li
113.658 283.304 114.816 282.525 116.178 282.217 cv
cp
f
49.8828 283.933 mo
52.2598 280.006 li
52.6016 279.167 52.1055 278.198 51.1504 277.844 cv
50.1953 277.489 49.1465 277.881 48.7969 278.717 cv
46.7285 282.142 li
48.0703 282.364 49.2637 283.064 49.8828 283.933 cv
cp
f
82.1113 327.887 mo
104.338 327.887 li
105.23 327.887 li
112.299 327.887 li
111.57 335.373 li
114.332 335.373 li
141.727 335.373 li
163.094 310.461 li
82.1113 310.461 li
82.1113 327.887 li
cp
.282353 .235294 .207843 rgb
f
58.5879 327.887 mo
82.1113 327.887 li
82.1113 310.461 li
0 310.461 li
21.3672 335.373 li
48.7637 335.373 li
51.584 335.373 li
50.8555 327.887 li
57.7109 327.887 li
58.5879 327.887 li
cp
.45098 .388235 .341176 rgb
f
50.8555 327.887 mo
56.5488 386.351 li
62.8106 386.351 li
57.7109 327.887 li
50.8555 327.887 li
cp
.6 .52549 .458824 rgb
f
57.7109 327.887 mo
62.8106 386.351 li
63.8379 386.351 li
58.5879 327.887 li
57.7109 327.887 li
cp
.996078 .988235 .827451 rgb
f
100.129 386.351 mo
106.607 386.351 li
112.299 327.887 li
105.23 327.887 li
100.129 386.351 li
cp
.415686 .34902 .298039 rgb
f
104.338 327.887 mo
98.9629 386.351 li
100.129 386.351 li
105.23 327.887 li
104.338 327.887 li
cp
.996078 .901961 .65098 rgb
f
81.6426 257.595 mo
81.9082 257.584 81.3633 257.602 81.6426 257.595 cv
81.6426 257.595 li
cp
.258824 .258824 .258824 rgb
f
82.1113 220.257 mo
82.0254 220.224 81.9414 220.2 81.8555 220.166 cv
81.9316 220.197 81.9941 220.226 82.0664 220.257 cv
82.082 220.263 82.0957 220.27 82.1113 220.277 cv
82.1113 220.257 li
cp
.403922 .470588 .427451 rgb
f
69.4102 214.843 mo
69.4902 215.392 69.5586 215.96 69.6231 216.534 cv
69.6328 216.624 69.6406 216.715 69.6504 216.805 cv
70.334 223.232 70.0391 230.975 68.0898 236.503 cv
67.6445 235.239 66.2969 231.162 65.9336 229.899 cv
65.9297 229.763 66.0645 229.537 66.0195 229.41 cv
65.8633 229.364 65.9961 229.398 65.8633 229.364 cv
63.6914 228.84 63.6895 231.124 64.2949 234.138 cv
64.8281 236.78 66.75 239.599 68.0918 239.599 cv
68.7481 241.883 68.8828 244.562 69.8164 246.772 cv
70.209 247.7 71.002 248.715 71.9883 249.707 cv
74.7129 252.448 78.9492 254.887 80.5156 255.013 cv
81.5606 255.097 81.8906 255.072 82.1113 255.092 cv
82.252 255.106 82 255.085 82.1113 255.092 cv
82.1113 254.464 li
82.1113 221.795 li
76.502 221.42 71.3477 218.834 69.4102 214.843 cv
cp
.909804 .772549 .662745 rgb
f
97.9121 229.478 mo
97.6836 229.478 97.5156 229.294 97.2441 229.41 cv
96.877 232.235 96.082 235.435 95.4316 236.868 cv
93.6543 231.83 92.043 220.88 94.1055 217.524 cv
91.4492 220.505 87.0762 222.106 82.1113 220.257 cv
82.1113 220.277 li
82.8145 220.986 83.5176 221.846 83.5176 221.846 cv
83.0469 221.846 82.5781 221.825 82.1113 221.795 cv
82.1113 254.464 li
82.1113 255.092 li
82.2148 255.1 82.3379 255.103 82.5215 255.098 cv
82.7871 255.091 83.1836 255.067 83.875 255.013 cv
86.6543 254.799 89.9648 251.751 92.082 249.213 cv
92.7695 248.389 93.332 247.619 93.707 247.017 cv
94.4629 245.811 94.7305 242.838 95.4336 239.681 cv
96.6856 239.353 98.8145 236.739 99.3125 234.26 cv
99.9199 231.247 99.25 229.478 97.9121 229.478 cv
cp
.870588 .682353 .537255 rgb
f
82.1113 220.299 mo
82.1113 220.978 li
82.2285 220.98 82.3457 220.986 82.4609 220.986 cv
82.4609 220.986 82.4473 220.549 82.1113 220.299 cv
cp
.14902 .133333 .133333 rgb
f
82.1113 220.194 mo
82.0254 220.182 81.9434 220.179 81.8555 220.166 cv
81.9414 220.2 82.0254 220.224 82.1113 220.257 cv
82.1113 220.194 li
cp
f
96.6484 216.269 mo
96.5527 213.596 94.8574 211.757 94.2246 210.825 cv
94.2129 210.805 90.9805 206.242 82.1113 206.359 cv
82.1113 220.194 li
82.1113 220.257 li
87.0762 222.106 91.4492 220.505 94.1055 217.524 cv
92.043 220.88 93.6543 231.83 95.4316 236.868 cv
96.082 235.435 96.877 232.235 97.2441 229.41 cv
97.9707 224.406 98.7969 218.801 96.6484 216.269 cv
cp
.0980392 .0823529 .0823529 rgb
f
82.1113 220.277 mo
82.1113 220.299 li
82.4473 220.549 82.1113 220.299 82.1113 220.299 cv
82.0938 220.287 82.0859 220.268 82.0664 220.257 cv
81.9941 220.226 82.0254 220.182 82.1113 220.194 cv
82.1113 206.359 li
81.5957 206.366 81.0703 206.383 80.5156 206.423 cv
76.0762 206.746 71.8106 207.627 68.9219 211.088 cv
68.8242 211.225 68.7598 211.348 68.709 211.466 cv
68.7051 211.433 68.6914 211.402 68.6856 211.369 cv
68.6797 211.377 68.6738 211.382 68.668 211.389 cv
68.2148 211.979 67.8066 212.665 67.4356 213.426 cv
65.6973 217.013 63.8633 223.296 66.0195 229.41 cv
66.0645 229.537 65.9297 229.763 65.9336 229.899 cv
66.2969 231.162 67.6445 235.239 68.0898 236.503 cv
70.0391 230.975 70.334 223.232 69.6504 216.805 cv
69.6406 216.715 69.6328 216.624 69.6231 216.534 cv
69.5586 215.96 69.4902 215.392 69.4102 214.843 cv
69.3379 214.7 69.3867 214.684 69.4102 214.843 cv
71.3477 218.834 76.502 221.42 82.1113 221.795 cv
82.5781 221.825 83.0469 221.846 83.5176 221.846 cv
83.5176 221.846 83.0879 221.191 82.1113 220.277 cv
cp
.227451 .196078 .172549 rgb
f
82.0664 220.257 mo
82.0859 220.268 82.0938 220.287 82.1113 220.299 cv
82.1113 220.277 li
82.0957 220.27 82.082 220.263 82.0664 220.257 cv
cp
.14902 .133333 .133333 rgb
f
49.2832 284.927 mo
49.8828 283.933 li
49.2637 283.064 48.0703 282.364 46.7285 282.142 cv
46.1543 283.091 li
47.7051 283.204 49.0371 284.102 49.2832 284.927 cv
cp
.258824 .258824 .258824 rgb
f
65.1934 284.559 mo
65.6211 283.552 li
64.8262 282.808 63.5293 282.328 62.166 282.345 cv
61.7324 283.368 li
63.2363 283.196 64.6797 283.817 65.1934 284.559 cv
cp
f
116.723 283.118 mo
116.178 282.217 li
114.816 282.525 113.658 283.304 113.162 284.239 cv
113.738 285.191 li
113.889 285.191 li
113.889 284.37 115.158 283.353 116.723 283.118 cv
cp
f
101.117 283.346 mo
100.697 282.349 li
99.3164 282.422 98.0352 282.987 97.3477 283.803 cv
97.8438 284.972 li
97.9961 284.134 99.4805 283.299 101.117 283.346 cv
cp
f
79.0313 259.704 mo
78.9258 259.877 78.8242 260.048 78.7305 260.216 cv
79.0313 259.704 li
cp
f
59.9922 305.282 mo
58.6465 305.282 li
41.8438 305.282 li
40.5059 305.282 li
29.8867 305.282 li
.0371 305.282 li
0 305.282 li
0 310.461 li
82.1113 310.461 li
82.1113 306.06 li
82.1113 305.282 li
59.9922 305.282 li
cp
.780392 .698039 .6 rgb
f
163.057 305.282 mo
134.393 305.282 li
122.574 305.282 li
121.002 305.282 li
104.615 305.282 li
103.244 305.282 li
82.1113 305.282 li
82.1113 306.06 li
82.1113 310.461 li
163.094 310.461 li
163.094 305.282 li
163.057 305.282 li
cp
.572549 .494118 .423529 rgb
f
58.5879 327.887 mo
63.8379 386.351 li
81.9844 386.351 li
81.9844 327.887 li
58.5879 327.887 li
cp
.6 .52549 .458824 rgb
f
82.1113 327.887 mo
81.9844 327.887 li
81.9844 386.351 li
82.1113 386.351 li
98.9629 386.351 li
104.338 327.887 li
82.1113 327.887 li
cp
.45098 .388235 .341176 rgb
f
86.5977 346.189 mo
85.3789 346.623 84.084 346.879 82.7402 346.95 cv
82.7402 353.056 li
84.7481 353.019 86.6836 352.808 88.5 352.424 cv
88.416 350.199 87.7617 348.051 86.5977 346.189 cv
cp
.996078 .901961 .65098 rgb
f
76.957 361.295 mo
76.502 361.439 76.0527 361.607 75.5957 361.808 cv
76.7969 362.648 78.1406 363.24 79.5606 363.552 cv
78.5977 362.955 77.7148 362.191 76.957 361.295 cv
cp
.996078 .988235 .827451 rgb
f
88.1231 345.526 mo
89.5176 347.375 90.3457 349.567 90.5313 351.904 cv
91.3926 351.646 92.2051 351.349 92.9512 351.019 cv
92.582 348.586 91.4023 346.332 89.6074 344.631 cv
89.1543 344.953 88.6563 345.254 88.1231 345.526 cv
cp
.996078 .901961 .65098 rgb
f
88.4688 353.912 mo
86.666 354.316 84.7402 354.543 82.7402 354.582 cv
82.7402 358.978 li
84.0859 359.039 85.3828 359.256 86.5977 359.623 cv
87.668 357.91 88.3125 355.947 88.4688 353.912 cv
cp
f
87.0391 344.279 mo
87.4844 344.106 87.9375 343.896 88.4141 343.644 cv
86.8066 342.496 84.9395 341.805 82.9668 341.63 cv
84.4785 342.206 85.875 343.115 87.0391 344.279 cv
cp
f
70.9941 350.906 mo
71.9219 351.336 72.9531 351.711 74.0645 352.023 cv
74.2324 349.726 74.9727 347.564 76.2168 345.733 cv
75.541 345.419 74.9043 345.049 74.3184 344.631 cv
72.5547 346.302 71.3828 348.516 70.9941 350.906 cv
cp
.996078 .988235 .827451 rgb
f
77.2734 344.4 mo
78.3848 343.189 79.7324 342.253 81.1875 341.679 cv
81.1875 341.612 li
79.1328 341.754 77.1836 342.451 75.5156 343.643 cv
76.0742 343.934 76.6621 344.187 77.2734 344.4 cv
cp
f
82.7402 342.306 mo
82.7402 345.155 li
83.6953 345.105 84.6328 344.964 85.5371 344.734 cv
84.7266 343.779 83.7871 342.965 82.7402 342.306 cv
cp
.996078 .901961 .65098 rgb
f
76.0527 360.074 mo
74.8066 358.144 74.1113 355.869 74.0332 353.465 cv
72.8594 353.109 71.7949 352.677 70.8535 352.179 cv
70.8438 352.351 70.8359 352.523 70.8359 352.697 cv
70.8359 355.797 72.1465 358.765 74.4375 360.875 cv
74.9434 360.576 75.4844 360.308 76.0527 360.074 cv
cp
.996078 .988235 .827451 rgb
f
81.1875 342.468 mo
80.2637 343.113 79.4336 343.902 78.7129 344.822 cv
79.4981 345 80.3281 345.111 81.1875 345.155 cv
81.1875 342.468 li
cp
f
93.0898 352.697 mo
93.0898 352.572 93.084 352.449 93.0781 352.324 cv
92.3086 352.711 91.4648 353.052 90.5645 353.345 cv
90.4785 355.859 89.6563 358.222 88.1816 360.209 cv
88.6465 360.414 89.0859 360.636 89.4902 360.875 cv
91.7793 358.767 93.0898 355.797 93.0898 352.697 cv
cp
.996078 .901961 .65098 rgb
f
81.1875 363.576 mo
81.1875 360.574 li
80.2578 360.615 79.3496 360.726 78.4785 360.908 cv
79.252 361.966 80.1602 362.861 81.1875 363.576 cv
cp
.996078 .988235 .827451 rgb
f
81.1875 358.978 mo
81.1875 354.574 li
79.3789 354.523 77.6367 354.32 76 353.97 cv
76.1328 355.951 76.6836 357.867 77.6035 359.543 cv
78.7383 359.224 79.9414 359.035 81.1875 358.978 cv
cp
f
85.6387 360.953 mo
84.6992 360.744 83.7266 360.619 82.7402 360.574 cv
82.7402 363.508 li
83.834 362.82 84.8066 361.963 85.6387 360.953 cv
cp
.996078 .901961 .65098 rgb
f
87.2012 361.369 mo
86.3613 362.244 85.3926 362.984 84.3398 363.554 cv
85.7695 363.244 87.1231 362.654 88.3301 361.806 cv
87.9414 361.636 87.5684 361.492 87.2012 361.369 cv
cp
f
75.9785 352.478 mo
77.6328 352.808 79.3809 353.002 81.1875 353.05 cv
81.1875 346.949 li
79.9883 346.884 78.8223 346.672 77.7129 346.316 cv
76.6602 348.158 76.0625 350.279 75.9785 352.478 cv
cp
.996078 .988235 .827451 rgb
f
81.5606 255.075 mo
81.5606 255.075 79.6797 258.663 79.0313 259.704 cv
79.0313 259.704 78.4609 260.706 78.1348 261.231 cv
79.9512 266.132 li
74.916 302.532 li
75.3242 305.282 li
82.1113 305.282 li
82.1113 255.092 li
82.0313 255.095 82.2559 255.049 81.5606 255.075 cv
cp
.301961 .301961 .301961 rgb
f
74.9043 302.612 mo
67.2656 255.009 li
67.2656 255.009 58.9356 257.728 53.1699 259.485 cv
38.9551 263.817 38.7773 265.151 38.1231 269.411 cv
29.8867 305.282 li
40.5059 305.282 li
40.6406 298.756 41.4766 295.573 44.3945 288.338 cv
44.0898 287.905 44.6465 285.747 44.8477 285.254 cv
46.1543 283.091 li
46.7285 282.142 li
48.7969 278.717 li
49.1465 277.881 50.1953 277.489 51.1504 277.844 cv
52.1055 278.198 52.6016 279.167 52.2598 280.006 cv
49.8828 283.933 li
49.2832 284.927 li
48.3086 286.539 li
48.0449 287.179 46.7871 288.811 45.4922 288.898 cv
42.7188 295.799 42.168 298.54 41.8438 305.282 cv
58.6465 305.282 li
58.3027 298.714 58.8789 295.016 60.9707 287.701 cv
60.625 287.303 60.7168 285.93 60.8672 285.417 cv
61.7324 283.368 li
62.166 282.345 li
63.7832 278.519 li
64.041 277.652 65.0449 277.151 66.0313 277.406 cv
67.0195 277.658 67.6152 278.568 67.3613 279.439 cv
65.6211 283.552 li
65.1934 284.559 li
64.4414 286.335 li
64.2481 286.998 63.4141 288.154 62.6836 288.215 cv
60.0918 295.411 59.75 299.123 59.9922 305.282 cv
75.3242 305.282 li
74.916 302.532 li
74.9043 302.612 li
cp
.0352941 .321569 .439216 rgb
f
122.574 305.282 mo
134.393 305.282 li
125.705 271.412 li
125.705 268.054 124.586 265.006 110.096 259.831 cv
103.838 257.595 96.9727 255.036 96.1426 255.011 cv
97.3477 256.733 li
96.1426 255.011 li
96.1387 255.011 96.1289 255.009 96.125 255.009 cv
89.791 293.474 li
89.8125 293.347 li
89.791 293.474 li
88.2734 302.697 li
88.2578 302.579 li
87.8027 305.282 li
103.244 305.282 li
103.109 298.837 102.604 295.573 100.607 288.552 cv
99.877 288.491 98.6113 286.998 98.4199 286.335 cv
97.8438 284.972 li
97.3477 283.803 li
95.4981 279.439 li
95.2441 278.568 95.8398 277.658 96.8281 277.406 cv
97.8164 277.151 98.8223 277.652 99.0762 278.519 cv
100.697 282.349 li
101.117 283.346 li
101.994 285.417 li
102.145 285.93 102.297 287.521 101.951 287.92 cv
104.045 295.241 104.486 298.576 104.615 305.282 cv
121.002 305.282 li
120.508 298.315 119.336 294.57 116.973 288.358 cv
116.244 288.374 114.816 287.179 114.553 286.539 cv
113.738 285.191 li
113.162 284.239 li
110.602 280.006 li
110.26 279.167 110.756 278.198 111.709 277.844 cv
112.666 277.489 113.717 277.881 114.063 278.717 cv
116.178 282.217 li
116.723 283.118 li
118.014 285.254 li
118.215 285.747 118.547 287.352 118.246 287.784 cv
121.17 295.036 121.75 298.306 122.574 305.282 cv
cp
0 .164706 .25098 rgb
f
83.8789 266.132 mo
85.9336 261.503 li
85.4102 260.449 83.7305 257.272 82.5215 255.098 cv
82.5215 255.098 82.5215 255.098 82.1113 255.092 cv
82.1113 305.282 li
87.8027 305.282 li
88.2578 302.579 li
83.8789 266.132 li
cp
.0470588 .0470588 .0470588 rgb
f
116.178 75.8669 mo
114.063 72.3674 li
113.717 71.5295 112.666 71.1374 111.709 71.4943 cv
110.756 71.8479 110.26 72.8161 110.602 73.654 cv
113.162 77.8879 li
113.658 76.9533 114.816 76.174 116.178 75.8669 cv
cp
100.695 75.9987 mo
99.0762 72.1696 li
98.8223 71.301 97.8164 70.801 96.8281 71.0554 cv
95.8398 71.3083 95.2441 72.218 95.4981 73.0881 cv
97.3477 77.4519 li
98.0352 76.6359 99.3164 76.071 100.695 75.9987 cv
cp
66.0313 71.0554 mo
65.0449 70.801 64.041 71.301 63.7832 72.1696 cv
62.166 75.9943 li
63.5293 75.9768 64.8262 76.4577 65.6191 77.2014 cv
67.3613 73.0881 li
67.6152 72.218 67.0195 71.3083 66.0313 71.0554 cv
cp
51.1504 71.4943 mo
50.1953 71.1374 49.1465 71.5295 48.7969 72.3674 cv
46.7285 75.7917 li
48.0723 76.0134 49.2637 76.7136 49.8848 77.5827 cv
52.2598 73.654 li
52.6016 72.8161 52.1055 71.8479 51.1504 71.4943 cv
cp
118.246 81.4333 mo
118.547 81.0022 118.215 79.3962 118.014 78.903 cv
116.723 76.7673 li
115.158 77.0031 113.889 78.0183 113.889 78.8405 cv
113.738 78.8405 li
114.553 80.1887 li
114.816 80.8298 116.244 82.0227 116.973 82.0075 cv
119.424 88.4504 120.596 92.2282 121.055 99.7106 cv
104.629 99.7106 li
104.52 92.4655 104.125 89.1716 101.951 81.5695 cv
102.297 81.1711 102.145 79.5793 101.994 79.0666 cv
101.117 76.9948 li
99.4805 76.948 97.9961 77.7839 97.8439 78.6208 cv
98.4199 79.9836 li
98.6113 80.6477 99.877 82.1398 100.607 82.2019 cv
102.684 89.5026 103.148 92.7292 103.26 99.7106 cv
60.0234 99.7106 li
59.7246 93.0695 59.9824 89.361 62.6836 81.8645 cv
63.4141 81.8029 64.2481 80.6477 64.4414 79.9836 cv
65.1934 78.2082 li
64.6797 77.4665 63.2383 76.8454 61.7344 77.0163 cv
60.8672 79.0666 li
60.7168 79.5793 60.625 80.9523 60.9707 81.3508 cv
58.7969 88.9523 58.2578 92.6384 58.6895 99.7106 cv
41.8066 99.7106 li
42.1289 92.3796 42.6113 89.7121 45.4922 82.5471 cv
46.7871 82.4606 48.0449 80.8298 48.3086 80.1887 cv
49.2832 78.5764 li
49.0371 77.7512 47.7051 76.8532 46.1543 76.7399 cv
44.8477 78.903 li
44.6465 79.3962 44.0898 81.5554 44.3945 81.987 cv
41.3613 89.507 40.5762 92.6384 40.4902 99.7106 cv
29.709 99.7106 li
38.1231 63.0603 li
38.7773 58.801 38.9551 57.4665 53.1699 53.135 cv
58.9356 51.3776 67.2656 48.6584 67.2656 48.6584 cv
74.9043 96.2609 li
79.9512 59.7805 li
78.2676 55.1189 li
78.2676 54.0632 80.5059 51.2863 80.5059 51.2863 cv
81.2207 51.2605 81.5332 51.2487 81.6543 51.2439 cv
81.7012 51.2424 81.7656 51.2404 81.8652 51.2375 cv
82.8106 51.2087 83.6074 51.1794 83.6074 51.1794 cv
84.875 52.906 85.2676 54.1599 85.7891 55.2126 cv
83.8789 59.7805 li
88.2734 96.3469 li
96.125 48.6584 li
96.9023 48.6584 103.807 51.2346 110.096 53.4802 cv
124.586 58.655 125.705 61.7028 125.705 65.0617 cv
134.592 99.7106 li
122.666 99.7106 li
121.789 92.1804 121.277 88.9538 118.246 81.4333 cv
cp
69.4102 8.49392 mo
69.3867 8.33322 69.3379 8.34932 69.4102 8.49392 cv
69.4102 8.49392 li
cp
64.2949 27.7878 mo
63.6895 24.7736 63.6914 22.489 65.8633 23.0144 cv
65.9961 23.0471 65.8633 23.0144 66.0195 23.0593 cv
63.8633 16.9455 65.6973 10.6623 67.4356 7.07542 cv
67.8066 6.31422 68.2148 5.62912 68.668 5.03882 cv
68.6738 5.03152 68.6797 5.02562 68.6856 5.01882 cv
68.6914 5.05152 68.7051 5.08322 68.709 5.11642 cv
68.7598 4.99822 68.8242 4.87472 68.9219 4.73752 cv
71.8106 1.27612 76.0762 .394717 80.5156 .0720168 cv
90.6016 -.661883 94.2109 4.45482 94.2246 4.47382 cv
94.8574 5.40602 96.5527 7.24532 96.6484 9.91772 cv
98.7969 12.4509 97.9707 18.0549 97.2441 23.0593 cv
97.5156 22.9426 97.6836 23.1281 97.9121 23.1281 cv
99.25 23.1281 99.9199 24.8957 99.3125 27.9099 cv
98.8145 30.3884 96.6856 33.0031 95.4336 33.3308 cv
94.7305 36.4865 94.4629 39.4602 93.707 40.6667 cv
92.1719 43.1228 87.5566 48.3781 83.875 48.6633 cv
81.3828 48.8557 82.6523 48.6721 80.5156 48.6633 cv
78.375 48.654 71.2891 43.9104 69.8164 40.4221 cv
68.8828 38.2116 68.7481 35.5319 68.0918 33.2492 cv
66.75 33.2492 64.8281 30.4299 64.2949 27.7878 cv
cp
92.0625 146.013 mo
92.0625 145.887 92.0586 145.764 92.0508 145.64 cv
91.2813 146.027 90.4395 146.369 89.5391 146.661 cv
89.4512 149.175 88.6309 151.538 87.1563 153.525 cv
87.6211 153.73 88.0586 153.952 88.4629 154.19 cv
90.7539 152.082 92.0625 149.113 92.0625 146.013 cv
cp
87.3047 155.123 mo
86.9141 154.951 86.541 154.807 86.1758 154.684 cv
85.3359 155.56 84.3652 156.299 83.3125 156.87 cv
84.7441 156.56 86.0977 155.969 87.3047 155.123 cv
cp
81.7129 156.824 mo
82.8086 156.136 83.7793 155.279 84.6133 154.269 cv
83.6738 154.06 82.7012 153.934 81.7129 153.889 cv
81.7129 156.824 li
cp
80.1602 134.928 mo
78.1055 135.07 76.1582 135.767 74.4902 136.959 cv
75.0469 137.25 75.6367 137.504 76.2461 137.716 cv
77.3594 136.505 78.7051 135.569 80.1602 134.996 cv
80.1602 134.928 li
cp
80.1602 135.784 mo
79.2363 136.428 78.4063 137.217 77.6875 138.137 cv
78.4707 138.315 79.3008 138.427 80.1602 138.471 cv
80.1602 135.784 li
cp
80.1602 140.265 mo
78.9609 140.201 77.7949 139.988 76.6875 139.632 cv
75.6328 141.473 75.0371 143.595 74.9531 145.793 cv
76.6074 146.125 78.3555 146.318 80.1602 146.366 cv
80.1602 140.265 li
cp
80.1602 147.89 mo
78.3535 147.839 76.6113 147.636 74.9727 147.287 cv
75.1074 149.267 75.6582 151.182 76.5781 152.859 cv
77.7129 152.54 78.916 152.351 80.1602 152.294 cv
80.1602 147.89 li
cp
80.1602 153.889 mo
79.2324 153.93 78.3223 154.043 77.4512 154.224 cv
78.2246 155.281 79.1328 156.177 80.1602 156.892 cv
80.1602 153.889 li
cp
78.5352 156.868 mo
77.5703 156.271 76.6895 155.507 75.9316 154.61 cv
75.4766 154.755 75.0254 154.924 74.5703 155.123 cv
75.7695 155.964 77.1152 156.555 78.5352 156.868 cv
cp
73.4102 154.19 mo
73.916 153.892 74.457 153.623 75.0273 153.39 cv
73.7793 151.46 73.084 149.185 73.0078 146.781 cv
71.834 146.424 70.7676 145.993 69.8281 145.496 cv
69.8184 145.667 69.8106 145.839 69.8106 146.013 cv
69.8106 149.112 71.1211 152.081 73.4102 154.19 cv
cp
69.9689 144.222 mo
70.8965 144.652 71.9277 145.027 73.0391 145.34 cv
73.2051 143.042 73.9453 140.88 75.1914 139.049 cv
74.5137 138.735 73.877 138.365 73.293 137.946 cv
71.5293 139.618 70.3555 141.832 69.9689 144.222 cv
cp
81.7129 152.294 mo
83.0606 152.355 84.3555 152.572 85.5723 152.939 cv
86.6426 151.226 87.2852 149.262 87.4434 147.227 cv
85.6387 147.633 83.7148 147.858 81.7129 147.898 cv
81.7129 152.294 li
cp
81.7129 146.373 mo
83.7227 146.336 85.6563 146.123 87.4727 145.74 cv
87.3887 143.514 86.7344 141.367 85.5703 139.505 cv
84.3535 139.938 83.0586 140.194 81.7129 140.266 cv
81.7129 146.373 li
cp
81.7129 138.471 mo
82.668 138.421 83.6055 138.279 84.5098 138.049 cv
83.6992 137.094 82.7617 136.281 81.7129 135.622 cv
81.7129 138.471 li
cp
81.9414 134.945 mo
83.4512 135.522 84.8496 136.43 86.0117 137.594 cv
86.457 137.422 86.9121 137.213 87.3867 136.96 cv
85.7793 135.812 83.9121 135.121 81.9414 134.945 cv
cp
88.582 137.946 mo
88.127 138.269 87.6309 138.57 87.0957 138.842 cv
88.4922 140.69 89.3184 142.883 89.5039 145.22 cv
90.3672 144.963 91.1777 144.666 91.9258 144.335 cv
91.5566 141.902 90.375 139.647 88.582 137.946 cv
cp
105.231 121.536 mo
100.129 180 li
62.8106 180 li
57.7109 121.536 li
105.231 121.536 li
cp
81.6543 51.2439 mo
81.8984 51.2341 81.3535 51.2522 81.6543 51.2439 cv
81.6543 51.2439 li
cp
101.9 180 mo
106.607 180 li
112.299 121.536 li
107.828 121.536 li
101.9 180 li
cp
50.8555 121.536 mo
56.5488 180 li
61.041 180 li
55.1133 121.536 li
50.8555 121.536 li
cp
163.057 101.932 mo
.037102 101.932 li
1.98687e-006 101.932 li
1.98687e-006 104.11 li
21.3672 129.023 li
48.7637 129.023 li
49.7988 129.023 li
49.2305 120.32 li
113.863 120.32 li
113.297 129.023 li
114.332 129.023 li
141.727 129.023 li
163.094 104.11 li
163.094 101.932 li
163.057 101.932 li
cp
69.4102 8.49392 mo
69.3379 8.34932 69.3867 8.33322 69.4102 8.49392 cv
69.4102 8.49392 li
cp
.17 .17 .17 rgb
f
341.389 96.4064 mo
336.078 58.1945 li
336.078 54.9621 331.986 52.2101 321.456 49.7307 cv
315.221 48.1799 309.366 47.2756 308.619 47.2756 cv
300.325 84.5353 li
296.833 57.9807 li
297.883 52.7726 li
297.883 51.1769 296.58 51.4748 294.984 51.4748 cv
293.383 51.4748 292.079 51.1769 292.079 52.7726 cv
293.054 57.9807 li
289.141 84.5353 li
280.847 47.2756 li
280.847 47.2756 273.747 48.8557 268.011 49.7307 cv
257.687 51.4748 254.017 54.0949 253.385 58.1945 cv
248.078 96.4064 li
250.847 96.4064 li
250.847 95.1721 li
254.76 95.1721 li
255.588 88.6691 256.711 84.6018 259.461 77.7873 cv
259.168 77.3713 259.077 76.8566 259.273 76.383 cv
263.073 67.1057 li
263.408 66.298 264.419 65.9211 265.339 66.2648 cv
266.256 66.6047 266.735 67.5353 266.405 68.343 cv
262.603 77.6184 li
262.35 78.2365 261.697 78.5969 260.996 78.5822 cv
258.393 85.0559 257.296 89.0168 256.498 95.1721 cv
261.138 95.1721 li
261.138 96.4064 li
267.779 96.4064 li
267.779 95.1721 li
272.179 95.1721 li
272.346 88.9152 273.054 84.7912 275.021 77.9191 cv
274.688 77.5363 274.544 77.0334 274.688 76.5393 cv
277.495 66.9133 li
277.741 66.0773 278.709 65.5978 279.658 65.843 cv
280.609 66.0851 281.184 66.9611 280.938 67.7971 cv
278.129 77.4211 li
277.943 78.0617 277.331 78.4894 276.629 78.55 cv
274.756 85.135 274.07 89.1594 273.904 95.1721 cv
278.071 95.1721 li
278.071 96.4064 li
310.941 96.4064 li
310.941 95.1721 li
315.051 95.1721 li
314.886 89.1594 314.199 85.135 312.326 78.55 cv
311.623 78.4894 311.012 78.0617 310.827 77.4211 cv
308.016 67.7971 li
307.771 66.9611 308.344 66.0851 309.295 65.843 cv
310.245 65.5978 311.214 66.0773 311.46 66.9133 cv
314.267 76.5393 li
314.412 77.0334 314.267 77.5363 313.935 77.9191 cv
315.901 84.7912 316.609 88.9152 316.776 95.1721 cv
321.233 95.1721 li
321.233 96.4064 li
327.874 96.4064 li
327.874 95.1721 li
332.457 95.1721 li
331.659 89.0168 330.561 85.0559 327.96 78.5822 cv
327.259 78.5969 326.606 78.2365 326.353 77.6184 cv
322.55 68.343 li
322.221 67.5353 322.699 66.6047 323.615 66.2648 cv
324.536 65.9211 325.548 66.298 325.881 67.1057 cv
329.683 76.383 li
329.878 76.8566 329.786 77.3713 329.496 77.7873 cv
332.244 84.6018 333.368 88.6691 334.194 95.1721 cv
338.166 95.1721 li
338.166 96.4064 li
341.389 96.4064 li
cp
281.449 33.9855 mo
282.249 39.1867 282.519 43.6379 284.99 45.6476 cv
288.468 48.4826 290.778 49.5676 294.466 49.5676 cv
298.127 49.5676 300.837 47.9963 304.339 45.2648 cv
306.952 43.2238 307.512 39.007 308.329 33.9855 cv
309.529 33.5676 311.12 31.8225 312.359 29.2502 cv
313.657 26.5559 312.884 23.6057 311.65 23.2619 cv
311.204 23.1379 310.649 23.3527 310.109 23.8059 cv
310.109 23.5744 310.111 23.3439 310.113 23.1154 cv
309.105 23.2678 308.098 23.4269 307.087 23.5519 cv
307.289 23.9494 307.446 24.3889 307.491 24.8664 cv
307.623 26.3371 li
307.803 28.3293 306.399 30.1047 304.482 30.2961 cv
300.473 30.7043 li
298.557 30.9035 296.857 29.4435 296.675 27.4514 cv
296.544 25.9807 li
296.512 25.6799 296.468 24.8928 296.471 24.2756 cv
295.225 24.2922 293.975 24.2893 292.723 24.2687 cv
292.731 24.8869 292.682 25.6779 292.655 25.9807 cv
292.522 27.4514 li
292.336 29.4435 290.635 30.9035 288.718 30.7043 cv
284.711 30.2961 li
282.795 30.1047 281.39 28.3293 281.576 26.3371 cv
281.709 24.8664 li
281.75 24.3762 281.911 23.9309 282.123 23.5236 cv
281.214 23.4103 280.315 23.2639 279.414 23.1262 cv
279.42 23.3625 279.427 23.5959 279.433 23.8342 cv
278.877 23.3586 278.306 23.134 277.846 23.2619 cv
276.612 23.6057 276.515 26.3293 277.14 29.2502 cv
277.936 32.9885 280.232 33.633 281.449 33.9855 cv
cp
279.395 22.423 mo
282.186 22.8459 284.988 23.1506 287.801 23.3459 cv
289.431 23.3254 290.011 23.3625 292.665 23.5519 cv
292.665 23.5568 295.24 23.5891 296.524 23.5705 cv
296.526 23.5666 296.527 23.5588 296.529 23.5519 cv
298.225 23.3439 307.312 22.8478 310.117 22.4211 cv
310.117 22.3059 310.12 22.1906 310.12 22.0773 cv
310.12 5.73072 306.494 .000216841 294.459 .000216841 cv
283.729 .000216841 279.072 6.49042 279.387 22.0773 cv
279.389 22.1906 279.393 22.3078 279.395 22.423 cv
cp
326.835 117.408 mo
319.586 180 li
325.344 180 li
332.304 117.408 li
326.835 117.408 li
cp
310.997 137.996 mo
310.997 131.364 303.329 125.989 293.874 125.989 cv
284.418 125.989 276.751 131.364 276.751 137.996 cv
276.751 144.625 284.418 150.001 293.874 150.001 cv
303.329 150.001 310.997 144.625 310.997 137.996 cv
cp
323.658 117.408 mo
317.421 180 li
271.78 180 li
265.545 117.408 li
323.658 117.408 li
cp
257.161 117.408 mo
264.123 180 li
269.616 180 li
262.369 117.408 li
257.161 117.408 li
cp
380.677 98.5441 mo
357.584 128.597 li
357.178 128.597 li
332.108 128.597 li
333.636 116.246 li
255.583 116.246 li
257.359 128.597 li
232.693 128.597 li
231.022 128.597 li
210.459 98.5441 li
212.13 98.5441 li
379.006 98.5441 li
380.677 98.5441 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1506.m00.i121.n057.S.c12.153531818 Speaker or orator icon in black and flat style.eps)
%%CreationDate: 6/25/2015 9:19 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4NXehI#N51e?b+gr$i`'"W]8k;4p-jVfA@RrBgaab8?g[jD"mI(snp/jmEh0LI-j>kOH2m1Z5?)q_b6g_L0\%BOQUY.Zb
%mf'n+0Wi3\V>CEhG7&,_rnDqjhL3s;%/Qqh7E<eM*9e2\f61Q3>r5:%`Fk("@9NA5V->%MK?iDJf<#;VI_"4upA4*/nrHtPn?R3I
%^XNT4Jl\rL=(/^@X'`_"V*4]d\(M+3]=iB):iM:1!R2:(pe;j%JdLpb!T34m>JipL!7(n0]f,fFVdJ3mqSuGe(r301Xb=jUe*Zp>
%edEDpBBdlRE8KplHF6&Fg\JL@6VDb9^[rqaWppTR)9`3_=b7_'Q/J`%C^kVHKkM1u3ERol'J"n9.tmQZ.0j1Tdsj4E+9%VpK`Lq@
%2')^H1bAM?rbW@nK#R1=32kas$m+>?"j;Xm%Int?Gl^6tBT]f[a$KU&<>u'_[YA3,mD9eATD1Y3?oT/F\E4\p"behSZAZFqYRUH,
%mc2(#fSBNZ5F]Jrl\/t;XV(3D3L>&EUZR'b4=qKgX9nCTYSHfeFIE<a2M5C$+2l??,A?U5MT9pF2*BUfk0X-c&]_<9Gq]6XmC%ao
%%dO9oPJ=dL[]?eX6*DphoM>1aK$JB1/M2(h1<kDZdM\I-<UbB?*gH''"l4.7'9(e''B%nk@M]R<!2skOf0!tpf%5FP$>[(Y$OV=9
%CGm@<FcD!ns$LiC^"@g_q-UC+5^Y6k3caW!EDh6'c(o'mQUgi=SPGs8D;tpF;r$15,4>O1\%:b^fB==K)b`!!'$(XBjAd!;BQe@S
%hu<5)J+HDF>!r)TBs0V2g?Y8OJ,@PiWR3j<$?(RnT\G)TD%u\>^VN.#$VSEmL#ZLA%WfG#__K,6o4iQfKRd\g..FG0/H&NHh`T3e
%O+JL2-=H%4kKfgO]o#P.j7:D"Ju2K4($LEl_J8[<pn\2l'MXDdK>IFiErraS_7%]A1aY*[QiXIao";!Vlsut9=KOOWX4t8)")A%I
%8-J+Do]S%Ie1]8!$L#6mpn0OT!7_X&)Z=V.pn,qtj5)RCc]$shX49?$eZLNnotkljfY8gSGIstrG/`q/S)V31:\\Hq1^67LZeo2=
%Z>UH[dOt_0a3W!!gVTjfDh9(okq-pcFrF'd;'T1_m$OQ_C-_C@k%QGW4SmGhmC&J^FuXggEWDWYXLEeV+8nKe9/[g@BlU.99)]Om
%P5ns*Q[\U3nCZ$T*O$1a8&OI3Lj68\^-X?WE-+sh$>>4UaJ3E@qZQOp>]6aH:"3jf`]kNXI0p$jJ/6;FnF+4Tr9O=)l74PQkjM-M
%Nn-V#pLD'9)hk-'gT:t`\-<o!CRu"@!=5u2(g-(rC?[JGMe9$;$T^,]-p68eFV=\0s"jG$BZ#m(g>1l-_]tPSF.OBBB<=$*@t'@R
%d]'X""MFR9Y@^g4pcA]fInpRY?-@l=?d6UK+pT<$gh\3V&N%fe#!&oM"/giJQgE%cf/aeY1LbS!4E;R3(d0H%97&%_f%!4V7%]EE
%Z]P>?*42/Q`Npm)#K,CI\;m,+0R5>HWJS5!:-KDGN6-<dL@+s9T_<#[LLT:rVhGd*dU]_26%@P0,A#rOW@>*HAktnZ[+5b2HboG"
%&8*&dS/OUDj>u+l5nhJqaU%TS*(G\Rcs^C*:15pc"+;-nP9kZs4@s5)(-_^;VK,(<?;EnnHPQ0fi2bouR:tf#bD0\BP\a%W1)r/'
%7#njr?9NPUd=OItj[*YGr'ESLT=hHLm.-'86'g-`"[&jhB8)>!.lS+i/6o_g6Y><"c)*"(/R5im?4@m>euN\pIoDlJ*2gAek,.Oi
%jbTW^I(=qa\+&Jp^>-Sl>PN4V6<Q*^J2`f*M-9T9XIJ:sj[*Qsr&O7g[Y$esf$QpgdJ[jC\rmDTgqTJ^?=qa<kmn\ti6Nb#bN?)c
%j27dKf4f"[8lP[]GA!@F^sh#Ahf%(,gS;$CD7_gcZ.oJbC#i.&N@AVu4?2E,IMu-AJ%B9*rEq=6)s3O>pBe=>jRO)?/6L.uVoF_2
%/k5^i#sImTPp\I<`m(r(R<]C1UD0Fem%)\l_,7n3mp$LCVhGp&f^B>@n]a1N3cis/M"IoOl]o)Qrh.iaK2qW-WSsc:7r[Y[X)9;p
%(4spYF6[_Gko0K7q%$KX\ZhIk=N-_kmkFa1"-*=Uh8VG<2EQP+^/2c5Y?T#/@+D9])s5T4\T''LCBch34u8;T173@Am?cNdo98:'
%2$o@3/R4;kk2M/IK;M(@[9dond1-A+EbBG>c#Qq6Q[)!Oja9V'R?tp=Qt96Q.WHN\Zo-ntaYhBqO-k4<`1.kYXlb/&q\REF?Z#eD
%l.5/gHKV-%j(6S!%r`oZdb;ghBK,NFId&<t<B`Vt?B_E0A*--k3H1AU^mV>YML7m%1[QBYs-]aDEjsfWmKLFVF/1%!H6#qZM:]i)
%0JEH<'kcdM*7kPiC5q@0%hm*:e&!HPM9J[h2@js/AGPc=m*0G:l2kl>b[CY!TGqnr`RmM%c'n.58\K1j)LWC<CK=2>f(j^\-5;W7
%jp6C]%t@BK9B0).p`*AOhS@/+>a.,3!\6e&leHXWTB<Ddk!a`5Gq@!)Du\JHrgBV"Gu6\FIR-9&UR;!0OW1!57[6ZcR6>JL`H7S"
%:33'`2ejZM1=qXhdn+<888a_HC7S,H3XT'_3KH;5cHIN^_XB0Kiq*$AAKR>G[])+\=85c@r;=a]g=9H.S9>@=bE4iU$Vr/Hr)+^0
%Vk3[)1;`Zr*[=DiS8!g>le;%h7m(O8FOV!W)#RAhNkYr[:.WU;I*6XJZd'S:RRu]5^5j72Sb_7@*6?q-ns$JNANFJK<\%M\;JUR`
%g'c!5RuC(Dd:hP&iGr<?%@n88X_&rZjf$3(T='^:K?SmG1iunljcFr]o9(bV77^*9[,h!r+kc+'ndo<E5&:bMPZK+aM[c6n>.)pg
%[3).PmA(pCe9X,4!KWb>+-H_se)3?Th''d4$Pb`..ZHRb>4JO/[\1olh0'j17)PmF*'$.SDB;$U4(Za4enMR6af*`s[=Xle1#!0,
%D:Z?=:l/)b8X1]LOI;I)`M*uVQK#6]-u7B;<h>eak,oDpI^;XD(>fOjcWZPqA2l6BB?k9iEZN-cf:q%+Q'9*RSs*?BqG!tYab.g3
%(1g@$npd?M(:>PHk3G\h5e3;j.(LV_XD?Se9r^Y(K?Uu1eFR")P3XZ2SNC_(/P>sgeY;+jAmW"HB4bl?Z)/l"=^FI19_0guqsqC)
%'jcf^R(o[[k3!k9kpiR@JfAi^@;52+69!\ir8\.24R0*hH.UA:]0n\U=S<ilqD2-fHG*Np(38e'Em7b.[=qkT"1a_M:)@qf+kQE_
%G'X-kQtu_)$?.4*;Ji;-g;7#t8@<5([=tloOD8hZeJ>UI6E9.1C@R80aV==#ZaM/?[c$&?AEPEC\6u)tZ]Vk-UE!LB@&!lE-"t<L
%$?hF25">B&<t/MQm'J=Ks-ZXj*Amd+=pM1`O-;$b4O+ispO[R4j<Z.2b?JT;ns97i?JdLUWO]UQAWh#&s-m6bK"bZ,"l4q5eI(g'
%%JUnAmfr\d\3]66M]6CH2q7btUXJKcK!T'%oI#q<-Zg*Q#*iHfe\oI&9lB#PVX*'P1Hc903]FdsRV?lM^/4TSi93q64u_)K`oj4T
%59DrdMe2fbdPLphq4j?rp<Ui8ZS%m9h=ajX%gL;XE0QmhQh"s]JtO["RnG2l,M73#.[Cc5$lh)]J#:g;>dT,L*j2+cM3]BBGF:sW
%>u"7O?.7;nH't1X@7DOs'5(e!Ma3kZrK;q17[9>eNl7HI,Pacp0AZs\3KK#QCS'pfdr3Xu\&eS%o"Weq16MU-_Sq/67a$_fn''sE
%Drer#DLVSOZijuk%;d>f``V;L(HLAAc?BsPMk'5[k<!1)\/CA'/98I_SF7ZbHem`W&[Y`t^Et$nX*K.KJ,sG.]V71%iM7Q_EI+*s
%l'C@=[f3LT"qKThhL!Za_l%)Tj:uNWd7T@h@B:BlZa4().!Ia\1jAL]m`Z?n_G2ZC"t?D((bHqB@74T;+^7@UINhZMb_u9-PHhO'
%ES_(Tc3@At_$9]1c1CACT?V7((i8hr`^[F=l\s%p/`LE$pt6j?Q33DA*'a>r?S#O%ci2$P3'"8a5n![W1Yrfb4#Pa_Eo9poDmMSH
%N;>_F6;G^d;\%8URcH5(dE7hkD+]L&NN+[Vk*#)I86NlhAj'Irhpd0Rs!jt"jk'B@SHDg5M<-]LJb_/i7bL:DRNBF_GQ,;XQf2*R
%7ZT)%08mWh,4MlD]Hkl=@29?cLaW\N?P\3Z7Gq_hGZb/U(4hf4nj""BQg4c\VIrucS3!:1#p:5pLM*b782p18M4;uBI'"O7bf@SL
%H,sZfP%hW`S&j'W]sqlf>$ad\_jU2@-Lt5]c+[/k#o?=kZql#/3KmU\Bqj,t*7UE%j6[6935`,2:l[>J\]hX*]V_+3:lmIZN+ZHU
%hLo+#jDc_g@(KK"0O<^D(Ul%LDI8hJRJtOf;fm+YCNTS[I&,o%FlherF_]<h5;OY&gpaWIOQtXAhn*]`;?_n4K>2%<LE%CqV*WSI
%TmLt6%gL)a]qCKd,gRFUmh:`]Ma"p@3Sg1h%*[GIr5(#$r#Ekr6^n;kD,%M.:8ZB#MJe;t/ft^O/<2.t*4i!.5iStZ,?G&>(cO<_
%bWNsO"SiDQ_LYWAV#JEo(lQS'Dce!s=i<&WaJW1Z0kQ&R]GhF&aFhASN\PsR?c4Z7EK"$^R7/**&]^9&36(uYLGl*mW^aYcrn1GX
%<ZfgpYI_t@jmi9(`;Kt>T*e3`T3TVsZWFtbL@'CK]K^IC6P(>%[?J]E&=K$2HF..AbA9phrF!)NHliQ`H62f'21A`=Fh1(qk+Fmf
%6CJ1(i4.fZ.i/dE7aEh)hK6$;\7fOW7Z31ZISE3\LHM+,H\N;;m``k>4#cr+R\,((c0Um%B>&1EO.)eOe&*HOa/K:!4T8>>\)Hjm
%Jf`OS2X"3GIZB2sdpWXVaF"0q(Up$tEPSL)7[V@nR$1A6opWN/J^POTr9i@,Hf[P%er.5KRoJa>$^jGg="NPh'<-Z+&31WYa8A.9
%=W0shbN:CIOJDAVmK2p'82i"4Y:X5Rs#(WW:&B%kb:S+Pl-$\m2n/;=(>diJ4$X0lDW/k=hfs3&Cs&78c/$2+YT,S7/H!%mqf=b-
%C#R>hgpr,#[rCLGmbG[M9@:eKIKLS$Hq;Jm95!--QS'(0$^Yb^>e5.8DWAB2bG3X,\j(Df5.lup:KUlC0R\^/k=#SrnensV]b5D(
%r%ii+`8Z6i)&HT7E>M6kU%%n=(M$2e(u56\N^$CTIbLgP0/j4Hl<`$+c,#J6>]I[\i(#:nPZj$8(>\*M')UJR;,2N$KoL8<nE,ml
%DHq;TT3Zh#o0L[7$o@3Mg5WNNqK1+pq.@aWq>O^W?Pg8a3EtLlfk]XC/:K;;#A2bXSoq<"UU[$_m%)\l_,7n3cX9BST,(bD57s1t
%Xi0E@`_(Vg\(pBC#IT\$Y"SPkkpN?^?1-#@c])8Rs2!_7*q4>ngnPRji*SL^_m-IFj$bbZm&^/pfcK9JWeD[qKb#W`.GW&:X3@J6
%PJgT]?Q*nV="]/Z5ZJXR$YsWgbq6$-C\i8,q)7g!=9gjf3JmMgbdm'b;o:8Dd[.#jq>72H$*JtioZ4lt=r9]CcmW)M6pH)C7tQNZ
%g*jOP+oIg1TR8>t@HNQ]?Z#uuK&+2gP.M\k-@QdkBNjIslSSn`m3(#'luOK'E`cJ2Gsp?I'I?o]5iV-'jZM]\Wdl@7*nI\Ujio74
%c#Y5,DH0<!M)e:7I;i"uNcZE\b&N/MCS;_\fQ*C&j`jKUJ"[ut8f5meDTp!B$f*f:\oAc9aGZ)gcDo:`CZOCNSB!9g`EZ<Z%D9UA
%Apm\W7XjZ?iZ0`EQoJI.1J;W3iaSYH*)X<Pe)e*:@4l*#?I6W?<.BU`ak5%6GplN"S-P09o1J<t4P_)Xb;InC?)u_,3KD^'>>3g'
%lfb3PnaYp,ihjgbF+6^"YD[6kk;KT7E*:1a%dSK(Dp-f55O+#p-MPjV,ni5?[dKd7gDo:SY$lh*]Ptki!Zo_Y0>#7"7O1Ugi,!"s
%eFYkqe"'-Y3dsmc\d@PZMrrlh^1dZGrE7M%D>'hDs-U2-*n3sVSF0WM-]LHQU^SFE2K/@F0m_!jA9Z\*+3p]"\Of1iF:2:2VN]]^
%"dr)Sbk.AXbdOEQ*'u7f[KI]HC7Y?,ShDP:+O/fRd)WP`-"]@+EBV3\0'm78V!2(2MpR7EFK"9&e7pQtS:=/7M\=3?;e#Q\<cH<E
%+PeX:l.X6SV\+@dM-r5n:0r')#;?PA0si:cgVJ0A'E@1's1Gq;h`Uo*TJ_E&h5:di^k,1<mV,MMmLB%0KpT2Bm6'SIp3R6Nj.mb)
%r+ijoC,O=?s,!Gih/;O%r9pk=U%nHBEhOls"@sf)o*\A6Ys-*6e-_O2l&]<gFA8P1idVB>(]*sNp\D9rDfC@GK(jg:?Z`l/Fm*2R
%P=qNu*,6VH4p0oZ!\,@Z4_hF/>!Y,=/*u<ra=8S8cheVI%cMnp^2@&U<R?W+k;n>,IlP%.RG])$IFiLEn_F!S4s=^;hZ(B@4bped
%!UMJlM8IHQVpAP?nJhCNLs,iPBu!oN*ZPJE::WRV71?6=gN-2,"bT+VGT<5[A)U(Q%UjtgTLU/7fI+VsrI8hUP!Am<T7]3&G<8u'
%psSIK;\^WR*).2]*qBi@!r/@94SmGhmC$u6s">u8;UA9Z&<!]5lbbV?&!biKB]AI%6O?$#_1*f=)ZX?I:\"$i708*/<UtVsbtiZ/
%.#EHJA?<ebHa7asdm*Z7f'@6J<7`f@J!fI!L9'Pds#KgXeH$aMcRuW:ougb&bsSiN3HTBj&3OfQn69OhMb7D/d*,?@GX^9G5Vt\&
%B+i1uhitB8dG:"6>LCB6:G0r6F4*u7";D49@=QX@s$EtE'3JR:oWA.]+%mT#/P?&>,eDj9TuD^H'_j@HV>aikc-bTUW;l2VgalLo
%TD^YEl?sH#Uu,q<DiPZAZZNCL]=(X_GSnq6A+6'l'M>G$0dD;)[#0m=RhN&q=Kfn`Qkc\bE"?5u10V4P#>>M^4pX7YkW))\c>dUp
%4qLC<M1$Rmq?V]Fg$X%(@<U?FJ43HIc3F0Zk5")r-S6\Bd**=A,V;%59:neI%BBPph+XoF*=QZl0XlMJ@f1_hR+i&^1W`(,Z-`][
%-.>%pF\ceT_r,:^lH<q^]-j'FH+OdoNC2dK\$;8IIm3:,NW'O34T;BDL!lQ"W:^@mh-.!ZLp!OTYdp`IigIedZRA:G!X)<A#L-'o
%?I]sRBJI`Jm99NF%BHn*rA:SLYI]@"gIcgHdW!Pb*7jt=T\'*[OIi2RVs=Ms[tW!83<.gnTQ&cR%^30JrPDS%.d.WDc1\@V<KBV$
%#_rgBUOH5/@<48!e82qi8M=uT].dSg!)o6^I50H\D:9Q:i<:7!%mlGL34KcZ2'rerN=O`%/AiDieqd$^EG0a1'*lS/TKB#`L1=f!
%Z!?Vm=mI.uS#[nppRi>pKAN4diAgUZ:tTJ=#IW#mX#]s;iDCL7L+pHq(g[r#iB.<1#7d6c)&-P2P)r%Mh(OE[77^cR'8==(NcR0V
%YTl?959*o/M+rFeTUT4k[FR>[f$8ob62)iSe#][@"tXIWe'JQMf,V]ZiWV6FXbK--mqBH"_N;^/pu0%;__?2Qoc4PI`^WDH!:4@4
%HM+<!^,"KlJQm0P*PQP)m=S=/qa(&!T\e4OB)OLK.?77US:q2f,nIB[B@+9-^iWr"<UhI%Xl^AF'=ukH".c%$DY1:4)h4SPVm?#/
%:`fZLJn1u\oCIbY:29HsT_5BEJ?u8!la7MV9:lEeD1HR^/0jBG<>&g%^E93QN3AP+j+ZQ9&G5H][mBW3i$er#','q!Ih-"7@e=&m
%m"r";?$'P&;X4a["d$."8_X];ZdnCFL&Ras]aXIl*WUOZZ9n#Y(_:drQM,KWXd3LJ[t"RN!;r;6,KNu=Ab!=__]!QATc3hH[$5lR
%RuFkeB%t,YlePklBIM0<nF0G%OSiAkr@6/f8P$%uMLpYD!pH=5dUHA+iaIES1Lp0uef5toEp;&rT[=afA&@6sE_;5V*#qZc?*Q3*
%d3Up2&tX!:G9S=ders]*f1q<5C%h$Jo?DH1D^MZWVT?MgeEZ=!a2C4%Q?1AtY^4d+OlMHH]%,iXR`:<@0HMuea!OYi[!<0,=6&8K
%mV,O5;6W@3K9W<-Ns.t17Rmf@oVhb#oBI#*G<'(OTj);(DB$:-.nom(=C)M_\(;/%<$@@lh%KTe*))_$Qqr1f4l,FoFUKp,3bb?Z
%XmNJUB\-'&NR7:enQ4o@bMjtnSF5'5Oe#!VLQ*;2Y4XFERIMd)PLC'>!Q[lrE08e/V>F8JJohRN2T.RMorA"a<G_/0[,^,UW9;.Y
%@U.-F))Ludd0@Xhe]GR`X2`(\3GB+c<#t5R<DSPm\'Zm#]N6RahZf!2H%n"2*pW8H^$(LsR0]7[Ba@0cgV>ef(23)_,7!&*>jLIu
%^"<t;YEm3Vk]-tX$q+R"E;H>+l%+E5)aS66Hq.U9-ce$UH)!l(hDh+./%W>?9pZofT`H'$%c.?IeHl#ro8^s^<6D@B&Zcj3-]RJa
%2-Z7i-]>l+$`T!R3-cQJPZtgFZK6`_okk"pI=Ub[3';.nBYK+&WF(Z)ghRV9]dDB[22,\-*dIt4rhA0ED\O?l%\rUG#pPjGHsRdg
%JRX^7.Uli<Lgee%(sY$Zi1CZ:mFSOFocI[3'b@<gqI=4W"qA?k%dg1A=MfWsC0*F(6OXri!9pPWK20ZnOc73S=S=S;J8#jYmMKGm
%)%.-CBFZ4%.N8"O,n/3C/\RB")P_j2%BB06=-LXsH.2sQA^\(pX:B+,HdTktXnDPN%PVTf9[kkTd=XDbP6T'-9b%OZ[ZVW*UQsmW
%*++P[O3Te=@\YeHqXL5ZhH@<D<qP@\rpVc*8Q0b8I6]`3=d<Si+086p=N;G.^Xrk<CZt&E+,-s3Y[[JCBF"iplKM!0Xek'*[1GX3
%S:cCkM]*H*_78=<;8E7-"W^]PZldHd;Sub)m/Qs_Qji.GETtuW?H0/"m1D_3<A&f:TMU]%XO!gda<?cS6UB[jIk+!+C.Tdu`5q@H
%I@S6L&cH^i:Epdq0ua]^kRXkQguo]f+eqeg&#A?T@'5%GgWuR"B\;"B;]eM44@k,O6L%IPN5jF0SM9ppB%TLQUY_$#>YECY=1(es
%b].Vs1CC=;^\X1O)!0/Q_$5j&MQ68u60Odq46%`PB&^%1^&;HBYni>c%PC*"0^41UjS64uY)Nd<`?Hl'0m46A5A:$:Zjq]E=V/kJ
%]IK]D4Q"UoXasM`U"3q6G^Z#tA$S]j<Q-8KHMeK=&2I$-ho0T+CVPfMbO`/U%utCS"u!e)D-jUO)1(Y9>-4P"4o#NJk>!5bnQ].n
%)b&Hgbmjp*7;l;2i5sEF]iJo>2@:#`cO)u]/dIZt':I^6]`W=<0Q@u_Kebg9:rB5C]q"A!\'qHdoXaF_df$5aAU1<3=&!)\"J!oV
%5^m?b^l4%N*->E0cq[XlV/'T``pEqBC7Cc6r#+oASG?L.^<?qu`4X-#D,rZ=(RG%Q3.9NirlQtl0K=Q=7Tf(I*6'P;V;hqCqEh;#
%'L:"Z6qjHXjoV-'^[TiDcmeU&Ij0l'gdD3HVWT3RiqX:'IJf5>HJgYh0"+l,e#/&]J,B.K@cAKc@GqP'VU4]E![]m1##BPO"%I!J
%ppi_M2HL:Uic'JZTMubMEM@bUBG,[B$EY42pB+@@[AtgN*mP8hZ*O]O][s,Z>ToPph^mUh4#hmnGL)ue2>`)9k7ZO!MB`s6dP/mM
%mkq9q;`l'm=W!/AHubk<p7tN^>ftFoKHNgm*/&FhCUUE:8_(nQ(pO:'[R3G[a03>;28E@K,KK1TQkmbo)6*N#aCd<5BQ3$G]W2<V
%/<=G]a3)%>n3hlE/su<e87OXqO0=B#j,7M^_VRu-or6`=3-E';'']8_psX,W2rL,K5DISlf-PqC?L9Hm<]`e&-sbGdLaYg)$Yp"0
%qlAJ`bemN@$'lfs:F&NP5<([<4-#MY1>M3F5nLm`',kl'4;snls3V<F.a0S9W+"5elsZ^%FP?]b3qc+DhWpca#1_Fg+QQfY(F@(]
%-:WmQ=.EgDCFtp8*D$`d%]A+L1an[$f765'Si&m9s*D^!=75)d-])_I)_G\oa@,iu5+l]$YG&38<[r'g4)XWC,:-.28u"*T9"?o\
%QcDt&U,@,3OZK[A?UekT0V"86rThj$9P'849@97+,Gtp3@e\NCNl)55,r#1/s0!Tk@Sa\+PRJSKAJ7D]Bp7adOGpO.<=>#"JY,8P
%WXXR?MdcLi;erh]7Iqco?s43Y*iJQ=UYQ:>PiGk?AJA6s!R*did!<ii$^@f7g>,KT7NHWg`7\&L,4Nc0L!V,-\Y$$6H/:\9m.4$C
%l4qoFf#u!e`U&kFgJ-p*Q]B48H_+LDJ%@r5q0/qgqtE:VCqb7<J"u^doso?dIr0P5pU#@RIbqX.I.u4Wdf"3m<p\^`hE9P4DQdul
%H2@<4ojkc4a8M?/]j]aQh(`5^GBM*?X_IaV\'"NHG%YUN9C]jLk3>rrX8g%]#d;q8W8?g];9oL%kKdI9[l1AHW8)dm\6^U"n"47L
%<Gd,6(V5mf]Ben*Vh<.$ceI$k[FJ0e>OB?-%k^m(41C!W($j/Wm;K-(n)-'g1[Y";Eje'4J*+InrTTBkEOkjfoNUA9ej"(i?LE:!
%>439^/!\Ys_qh/eNAGegmFUc-@&1rukBH?;CTI,WrG;@?:qgm5lA6PWHEU5uX5CBETA4q:'>^F?jY,e(]("=bn!1T+hQ?0&n(XD]
%dG!st0B.D^0ne0Rhj.=.4*CGn;Ye0jg"7k32=IY`^KUTIZ;nX=B"&`g+$>#Lr:\*!]jA=h^R?Z7B@RB=[B;Zo\\7-rYNsFdcPtW@
%]2.juoiD&/QE!IL^*<^&>8tmA9R)Q'nb2QTWDgRh??u0`j.Y6,j&+9J+84%);Qmg4Y?\6riKX#XoDVtH3VS!\^,*1:HF*OR#)B:p
%I'g8h)Jln<K/VcZTmCp`]XN1`h9N$=j0]5Z]hcr@a)8HbAS(IMj3tSZHM]MCqm^\`:jVIj\;eQ"aa*'^mbh,/hS*6<ec^Q<D,`Ck
%oBhm0LUGBR]=1g)p@'pLrpYVRTcrnDmI^-9MuL!PG^!*a[J=_'"ck=?mX4-LN"<oL;"/gKjmhB%<MT-Gr/mB1h4r5S`j]#VkVU0l
%_gM@9[X8OCg3t(qiH)@/IHf-&NX@=hfseC?-a_\PWLm;<8*=*iFBnXM;E9+!iqlKQG5ojrF8G%,IrP/\S'lb2qk.tQeGR&RrU]kG
%]OoppE.#MAqU'#)gc<b`hJQQd9Dc>dDspHDc#:nFNO/?7oA/uj"!.+)nQ4=*CilEgH:QlI01u,l#;:6NbDd=N4*%Nm"crik=2icA
%:Ys[:1J3]KYI:iY4SZU3r-U3B,+%$=fM9N*Gi-+ZV`Fkhg+VJ$'0@9TGL)8PRnkNfmN5X[dD=tsc.r`RaFi$.mB6I8I9t%?N?>;c
%$mqSo(]>NE'4MX4Woqp1V3C('dEUgre]-4sV6^uWP.#Z6d9+-SAWp2Yg_"1DkQe^mpTBh*(XD"$c:YLS)pp2*_1sWLS"lMY''^6O
%=8O$]GC-lJI^.@G2sP;k9C>=1?2>NNT!dE%-NF&/cJ%Q_Y<!I!13cZNf9D;&2HE)q4SC;[eIS"Hp!V4>\>LG(1LQdp6Sk<;0=0^q
%37qM#BPm*:m#T0/j/68S&rm5T^oMpm]2PujD.d_c/]jTYrp9#%]s[G#ld^XTDhCN+]@D2]/KJ32^B8Pi=:$@bg0*gW13W,g\XuKL
%B,C=$Z-W0QSX&Jo&=q"0Zhr&g=E!qc7H2VIpWoX'LGum@Hu/4gSNhF]o)<Fde@Km+H?6RP:QE%g3^!Dko"MN_2G(JKH3%@d%Hp"-
%2Rb?+Y*utl:\CQOW;h,;TGHE#cn.!"X_XiPSY\j6haNt]od^[Id_J#$"U7Jb!T)FnNP5</aRAtBHWqT#5*_/B4thh$rR0<"c"H,^
%%/K`8j?`Iq[f18k;E>^;>LBW2(hFUNg0;8eqE7$J328\8Yk_hEgi;-d[G0F,_5AmP`DV$frhm$'^!I]Erp0B87m?kDr\;3'>B-$Z
%^.hD]CZ7]silN!0k@OJM2u%1A5N%=8j73XA&^PX.$fdfu_I)1M4@BUl'!DTXLnirCd;.I$oGk-tLJL%ICfJ>nGYP\/RKXHmY@1+=
%8mKs<p(>3\CkNV<"s6Y0;Rkr_>H=6&G@3VSk0oOHj3Iu-RkX-P'DS1qV>+rVqj5$5ac5)'*SU_RdZ=-0a]Z?BU<U[/,Yq']^=PN,
%e4E'30lB.>qZTV-j$,\m>F!hQ*Z+d=M2'(V?_(K@-uAGo$fSmNaXP34M16^dd+O@#O"n$3nQ%N-=%"^prLtCt26-UaFD3PlNl80A
%_9.0P!f:>;p+Y4-1ue"dG[WR%E]GjlAV<92::q>)j0uaPb^:'E=n66Oqf#.K&"B8%)8Va9)"Kt_<9[]G`7a(!lYcGbU7kkBccF'R
%/Nj!q+m-i:nin<f3Ym9#D]8.&^4"\fQ[]T>L^<$es,WsMpn2a,p-iV<l[Ed]I__?`f,oI@"5<@Z])20^L\9J-%uR=:[,?&^P8:sf
%*O'0+QWror^H!r+^RT--e1\SoA).p,1$l`mBQkhAMlaQ9G6bghUrPhqXdlRH5@L&N?uPk%8EhGu1%"\cg\XWmq-nUDZ1?nnp['q4
%gF#;OYZ'643r78d7H:hae^fqf=WuC+rKYqpfj+EcgJ._EnFu$?i2FB'g8V7s5MUE_NO>-hWGeE#=+UZ=cQ\R2%&i>V5M@&bSc.O7
%a1T$oAHDc\3l$2[[sQ,,>@rK](-K%VIJEC&NtO&R%4JIBm>q:eH-,$UO9,#-SX1=fM_kZ+6<ut>fWe1raBpPE&&rB"HdBVj]X`A<
%bbk-\\&lLH[ORa2`]5+$DbH/WfcQIqgWk4l_t*'cl`Eqn[U7qj4<RR*Hi?ug'jDDs<J^Jn4"lJV]l.d?g,X7;E:_![PWI.G\#nq8
%C&cEc+F@KpVU9''UO3R.d`7C>+QS0QgF_Ud'DVk%R`IY5/iD:b4MABH!2$s]`:-8;r`U=)^&%]WpK'8S=35`g,CGm'qa/pt/KM7-
%<oEN>ms=s%ahG%Qk*@[Ug#E;<m+8'k+ZNkW]Y%OapuBpdXSCjEP/-6)+C%;`Y^Q=f"WWe[1Fm"#Fn?WeCgS*ADFHdC1p=#?g+<bp
%l?U71G.)TRGQ'"FZadVS5!QQj]@.WAHQ%,,[`A$JHKX67c`L9@DneKg3\ZjaZsSZd%R8`#]mb+r(0ttV_n0iaf]MTbc+P*g*ba*)
%@d@`X5NnqM/_MrQp7M:uGYL_s]3Du*`>`Ukjguo4L(3Ol``I6^bM&@khMY+BJ$o5kgDXsFqWaRLXi*5IqGQlC?EAiF**_<Ybn>A=
%40)T!hk*-fIB^A!J`qCb%a\sc"7#/jGP>YDeck&JDJbtol"n%[]lJ&i@caNpg<fjhj;sN8R8Cr1[EA*tK<KmTZ?1/'k:mJV3B8fu
%4uP<hdQLKb'XO4Ga^u6b*7)X0Poq#u\(Eho2u?=)_@LFS^o5o]?;=4_,8q,_p[p+7k)t]urFu'rMh\>!hQ9j-"dV@m$q`0:kRB`!
%7k\1+.ZLmO.S4UDGAu`;BU/.pgT6pr]!i^s3FKYM[Wdf!p#,/L5]"uWK883`ih6jG*d,O>J_0BQ?bPtnn!nd9q[&R<IV\9Hp6VUP
%KjBA]#;XrBEu-aPha8E+^2s/?@l%iPOSo)G0"t0@eT3R?gikETNfs7/LUru;:9a>$s7?FFQ49'AB?NC0(%%'F[H,(,;>AFHq`qgO
%]Y1`KjNYB\?G$#IgOB%6=F0r(i4O/V]X!HCF8+p3GPb9Vo\p&`/!rg;.smng&'tA<U`gk]2igq]pQ"^u3SHX,IIBPb%(9uajkX(A
%4C;8u,*OC;!b>W-hn908n:0=T]5r(fGcM!_oru3;o"[8DlT754X-;p(>Ars=#2uV`E6RLSS3_96S\f7@\@@k"mJ\\Sn'f`[0h80_
%.B`R=gY(8+oD\'B@-aq\Ft4Z+4]!;g(h^%fCGnA#5Q*<SeCt5rX89hbC</m6AbhMKDX4LO2juh/h2aUQ8R!hgft3lK[Kd?2j1'$$
%YfY8?m69a"QPXJp4E94B/\`dMI?GccOo+@uq?//<pHpq)Xm\!N;,!f$@>Eb!e[Ui.;4Kuc)"iUC4PKc5CpVQig6$q;%e@g1>EuOi
%YMF6jpH(:[\$]T.4PoD(#`6h2BlCaj^[ba'4k*.%lT6c.2R]gKB";$uk0d:Kbo`[5hC?(.)m:`(rmuoe++qDCe<]sgHM<K:(ARHo
%e@jLaJ=DiMRF$hcJ,U$3+-uS101IFP+$$3U9)Ql\c>gu!&':D*WLUZiUQT5g+kHPWp27G5q0]ZaFaj,Pc6Ib@j?L:.WJ?]ZI+rso
%]N<kDX:/R]!P*UTpT=+4_>0C@eN9I$VW'Hp`ps3m0;,.oMnHR*rKj$co4dN%Hf_O0oGQq`miOJPKVrC5eD0:uM#T?ZaL?M#DpOH!
%Z,n(Lc\IeF@:O.irRJC#R,nhXF6rh=gF8'19usg$9*V7;[bIGc'1[#Vp$a1#nl9RO@)[?Ng&A5Hlq>*#=ZtTsfj)74pC0s[L[X!b
%rPs)IBO:]KlKn'd),M:K&dUYd0%b-`%kD;54n&]aZZ_9Bp\LMs5/"RTlbuonp6S),XP56Tkgfu%HG5?[U%c1\ZR9A'7af%;Mo!C%
%/Xp(YGM[gbC5..^;0i$5D?+j8mr7?rrq9hdS9JIeBs7%:*RI#I>.h$ARpXO)(p67j@[JJt+"T!jG&QC](e[Z>Q1jlf'>3i_QWor?
%YAVCK;HcT[=6!_*,IRO98*BC]CSt^H]m,M\6W^pT7aY,Kll*o:-2%.Q[Bif@47MOCij*%.m[)_(Qb.2H*tCp!db3')f>-ghn4([-
%"@eZ"^A`/l"PnBOmoD',9i/SaRo'S*`pL/7Yk)k4U_usO?NY"jeTU4"H?Nlcg!t:,GdWHaT#9(MoYX^fdZ;i;=F'Q:j7Cn-JK"Bt
%h/^!mOJa67U(1c^g]p1\*J`rrB:HRGf6FCVjg/N8]@FLhRe$&[PSR3ZV`Ug1k5Df<0;`jdLJk/g?r#`?-@<,J@CJ:rXR:RV8-A-t
%(bRnDDs0(QG3Zh(T>B!ee_ApM%\KRLORLL*X5m#oS@.hA"7Q5Y':DAuX5G;Fn!tXC350!`Ts=-*B4_,B$LH`<[;k4J^BB"5E<fg`
%>?&9S?5('Oh:?1RG<'Q6Ve8(0c%*mYhoi3Hr3)o(<Z_!"qN7F=d>:sg>'dm[!BlfO&"C&[2he@a8*unT*]bDtS^s,(rd:X)4m`b6
%OhS99oR-%C=b"ogDZoD#g48kTEr=IK^UM=t,ROFF*[F2;YiM?]S]<PiM;OAtCX9d%ltRJP_k<>3`8(Z`LTr5D*&CG%7QJ3KrXg"-
%8%ZB;k<SB(_rJaI13U_pVO]t*i?cjt3s1G+c'P9%eL`bMo*:i)CPYH(lGMLT9&<bAG;L&*'Tmrql3,kmAY\4sIIm9:k<:=Z.pm[=
%r/ND^mou9bbqG=u0/e:jo?QU@cq`>th:pW:q"t=I;YTjAAupHbK@'XC$#98%WcZn!h^([2mJU(8q>KcI(XGgKrnH1/.d8F@!"M3(
%a!\b7L@("=QQK5QD<LZ<e_qTEkOJ9O45_GKpqFAN>8K[Fb,S938b"':>$q%E#PV7?D7RD_W#,P9o""*.27f8jWaFTXZ5,ksf,K_G
%n[_SEE3S/%duU-8s7j;1B/A2#idX)OeX+bDmaoe&$`r9r:X7EmBD'oO_h]DE7c,uZ'01ELp'sjtbu1N^HJT1o>[ki/7[pboXDT7;
%mp!#3^C4N]5MQDSpNd\T.Oa[il1g6b*,V<t\b3'3aLC%Q_OS-b?f-F[]$gF$D=c:X/<EL$[=*Pr\FQ<gYeI[EiPfu^>M[3mmPPRq
%inDaS)R]J5J;!0r"#e_R]sRh!)<P5N5N#9RM)E!G*HXa>BqtC)q[HidLHFD]mdBl+k0B=f(N2S4XF3p(s6@8Ms7B"kS*KD`,:DAS
%*c,qBlHZ]KrGm1ol#uc,YE6Yn%V*6X>N"W2IA#je+*Z:"Gj!i44*)uC!mNC!kG@32s+0e?7IA2An=Z,`qqBP`0+;K=n-JjPFT(c-
%j`C%2m23Bf'9W/&3iG2V%eFi=@]Qb7fkZl1V9AqaGl>\Mh5(qB*hLWma45'D$PF%n-^53;oMP"He)MH1&sJ/RImdf+=b@pS177X[
%Vsk(>d\bSd`b3kHC1"`XQ9%fZ*UJ5\qJ79Qr)%`glV*3P-mq7TZE^n=m*Jmbs5k$"$$M$i#QuO9`cDRk`+]0&_]/T2a8);!gRiOe
%/_U-Fb0J0F+1Q6#'mSuQ^JfX[%&S>ln*5r5B'7V`s83m`d]g/m(t1-e.32dF#IqqVp\;5%cS/L+=/!5iF7lQ4C(Ql*b>s*hXETG.
%_hRMih!82\n7sKC2TGO:R&OE(X'-n;l/#7L4naGre>H=7il>2@No+:fGbNi3r`kI9^93+gf<FXolf8#s$8qsdVn`1CM$=cTj[-@B
%)c>l0<4?>OfrMp.nE:N&c'W5n0`4XiW>Vl1"@&eOht;9pf5L[,NqlRLmdL.BL0lbWZ`n&1<m`c3D#ftndICKiKN/oP)P4o%gG:C4
%`ZJ4_q<9^5r/]f]Sn8br&)T'G=CBP-%Gc[X.r)er)>%J__mb/X[%_%4XFU$g_D=A!AXY[Xe$9?sL@5h!gMqJC<meBr>m;jrKk%nE
%=D#s"4TgFbG0t==QZ3R(%Gun!=h[;Jf&>BaMXT.aTOGG6keg'sZ7M2*Sti,J^?%A/Z>u@R#65F\!MjhTd=&s]12NRXWp%'LD;eN?
%Y%?YM30pVu&ok,=_uE)?bbAZ_/gG8OgC8PB#OaBQRhk)<-=Z2LE.m`Gn1YF5RZ9[,N.=+)a9n!QoR'k0?'?><F\@=&GVOdiM`+Fa
%lF7U3Y]%)BJZoTDk)#GWVSUI)F]V9"q6%d8"]3GWcN8rVoTgCGTVgt3F4"gUU.Hrg[2<Em+<[s[=rqh]C-"YZV`=fnlOcj:0NeNi
%ODRXP+WtY*..`(gY#tg>R#I[AFFY;6:dEPi"c3;d\nNqLE=a!0NncPfn29)k:kg%VK#0'kNe'_p6\YZR!4G<3dkoZ2q3tT-0$%gg
%LBn"(R5V8iP8^USdR+.FS(aVl8Du%+VA=$3_4+sRd3\lQ/)F09">Z,k.q*B[L/To[cVM_)J@^2-Ch71?;J*1anpS0>(YMZ,F_#=d
%dktE94g:jh4,9mDb`0JrpWEb]pAeRL"X\>6B$CVHpdJ999fb'i$4fE<TFB.:$NZ(O_^WT.e+>c"O"(M;nM"pekNPNNi@C!d$nhXE
%CQW-.;V&;t_@$M`8g4gDN1]8NVJR[M"3trn5@bPMG&^:5.CqKc)khM%4n:KsOh_C_/S_jL#(d8m#\5nC4\Qku%c<$IC3i`u#Xci;
%2YEFL!G_H@@]7sha#*^'*$MH#fc`Ss!=?V5O<f4,C9E5)+<:mJK6Mj!j`)oV`AK6"k;PMo7()!C73<?T<sZ0@o3)^jR\%F_ekgB1
%a>83ufG5#20F[H</jR-\)E]19iS"")!W!Gj,`3_-nnUdg*\\051s7-G"9u0,-["#p@aHSl@97,+(WaF3BdoL',0Mf:+<(j#-$)W$
%:8Y/r;'XuH&$QJ::4W2J3<4.@=JMht$#.$_^dC@N"EHY4U?j[Ud\!H^E#3rL&6/p\W3Za8ntppK_pu]IJZ]*;"oE*#.(JN#nC1<P
%kTC*qbomep*&aAECMAM?8Gdo[;PWjcc1>)<C7q^\=prRAl9bIMeBl8V^dWd`/Aqc;Bu(i8LpmrBe_hgDcfH1AU[u<j-m2(0D;KZb
%!m-$>lWL*V4?HL5MRJ/#0Re0NF\Q55SUoj_n$NQb-j(3FNI-pNU9_-A%,E,&898%_!,+@V_#"o%$b-WC&a1&1+7c[f@U'15R*$TV
%-4Q/^!f@]UiRYlg?m5VlFAsk1gE:2a#V/4K;Vc=[-sIY%CDd1aJM\[7JSZ<XnDk%?qkig."p-e(Ut`_W!C6o4*K:BV'?G^.:nejf
%:lVRi'=\Wc"b8GS&k^S;_o^DJq]2A;4W#=kfY`[nbl_Lt,RgmM4PGP"EKK"qIr!-AFq^]!/Qh+]7]]1pIcO-R1h3>t'$c$)Z/uF"
%P$LHJheEHq?pXi"@G#1jAP":A9a'.HkJot@JkXA9@knnIajJJFoj[L'b#%*^:p-9G:`$_n6M?%<!mYh^lk__"[,%I584C\>ZlR*-
%LoVL4A`+YmDPFOh`mUuV)QPX?E*Oojmh"P!>$NQZVgr[9-$Ka=Cc]!m6],hj*h[6)M@"U%?*K6(0-tBR%li.g;mHV#+B5I6al%gp
%.BSsa;Ol0+Wsb^9i+/b0RL"d%V;WcdUjIg+ifXQI@;+@L#dM"^RiWXV:[5ZAe;i9Nde$,`6deL<P".Wm:_,[[fGbC_!4tWLOUrZu
%Ger@C#V3r.l;XGVY:V3PK%9XV*@[O;"+A)9j1<@L"e'aBK>g:d<C^p1/.I&hWPp?VSt9^jh+RUn!maAHr@,-*(uTq!Pu>X&eMLLq
%?IIRDW+4;\A',f7NpA`g%8c2r>+RR=crpuREEptK>8=AS%O-S'#=*ZtVMj\'`7VCf.u&r0_S_KU_Whh#0(Vr16Yn_EP>$KdLY0\O
%AjVp?+Cf4TO)+[;+\?83(lgmCfRhB=nDF=GSTKAc[MOWIn@pTD#:R64+:gB(%<,@h$jMPu)9b_ZojLXXl>Z2C@IG?Sj4Nj*ARnBJ
%F6"r"Tcacs6Bh"AQ#DlGh$.;hiS$utbO?%[#5LS$"rrhE7c>+"/CdihI7[b(+eiRFKt!iHM3JL.b-Ot?5@]C9@\80Cke#;8W,50C
%O6oj]6b.K8<-93W)9b%_`]nRkAqq;+<L`o"TH&q>_#_<>Ldh*!]Qn5%fT&V":b8VWX@aB[`E#I:.7Kn%<%8%9=RS)\BcpDtSQ&Jg
%$:A)X9si%V;Yn$5rLct2$=uTf"\5:aN6qY6a.bdTYUdgLK1#5!&"l4T5!tq@K?c!j?L?.AW5Nhs^8T\MAW6*C'Uc3ggNJ^d9]/AQ
%1'X->VF=BQ/CjA%;!'_s$:]tVZ>pi*PDk#7`BDZh'B<(]?pI&Q9!VAl&9&*_$QLp[9Ep)7Am8st3k#=8r<-(O.ohaMbk?Y*p'm8A
%..f+FB8h0\-%PZJf*&ma\A'#Y(4snlWGj[G:"#*mrO!*]^.);?3#H['1HPmHmHf)+^]_S/6c%E^m.=^shcB\i`,.SMl.6t*'1^,>
%-.^3r/)DU-n\B&487Y?#C)c(^Op:J^NV"_.<?utps"Bp;/7+`=9=.3Plr`7BXB2qC8h<G>X?P#DV[o)cj/6SIoQ>-F-q]\R,0ek6
%TEQYYBLnK;L#WO3)VKcQD7Zq"Glf";iC0OC?E@eNjLnaT15jYEf\]XF?6k>k3>4h(?4j?djoF$td2ecQgc'VQN$oKEOFeITlYFG;
%L*=3ENM@M-IhTln@ah;!>,s+nUIa3OTM^_>OU91-(Y&6f71pl8.T,A.eB&LqMIpt?-=Hp*R6mIq1JnRM?>9OAVMu<,Ckk_ICR^d4
%>RWBF!=n_&m<KDi9)kSE\6*'uX;M-bm>P49k&Ipapc!L>YRKG+P4,%GJ/D+a@hR3#%<YXX,+rPdib7$;:u7Ht@ofYcEjU-M@gk2;
%&6Zb<5Vin5_MqIj>?S^7iOl"X4F/dM%TXI7p)4[KV:l/S33*CQ2WO\#PMUC4,WsqW%c)#VkGRk^<ISJui@M;JnU)kIL.9PB0ft+D
%A(AA>TI1Be''^eW4]94ceA3P%e4LV59#eZh*)oRbbClHd`76Wj2g(K?'@+dUr3E$41'\as@DjW_(%Fa^<&,C0;b#->@CAih%Nfi0
%FYhJAJ-ZuRAFSe>>BA4h1_cI%OO)HF6@n]GY%FN(E6uZZY].quSl!?H-B[7\FBq<"M7r1Jh;Dua*,rAEOq,:1Xt.r05j$:fi$*J6
%#.hMtF5"&U'"BPBmP+I+9^><L,6+.W&uuZ.g$JXiDqW?U>Jd\VGX]J5OkCiP*`[O`9W8ucU\1Q`ri;9a^acb@!\\"7YrJ5,WMNfS
%*D^:418@&(PZ"^\BmSP7p9B!.[5T>9opN'0Tq%\*/@:t!U0S"742kDtbkZbukZJu&6_K5dG)Xd^UMq4mN4_3qLU]5aLQ;1n[K>`S
%adoC%/80P1G.=6+72\ooc4J(:f\2t4;7b5a4E56[-DrQ:k]i]?K7TAL=\$u?L66"IoQEMj`Jd+#o3`Of1%KuPhhiQ$U7@R7&=?Yp
%6MEL3=p?Cr%6`gRHP44nd.e%64>qKHR<5nf-a$49B9V])9RJ=$:QK,9q]_Jt/d'1\$E-Q('X\1g$AD/&K31dHm%MSK9RVSgMF*TM
%=/Pm1K`RSKJhe-]!5e!<O$R8,$'YZVOEM4Fd!0^qP6iUM2Iim\X/iPpas?qQ<.6A1P-#7n1,Mp#TI;`qf-MgP(fXKFa^PO\Q=S[%
%=A#I',$T\n.KiRJ%&iFu1'Ir(/Z+Z='k>T^n[q^S3[7-^LWd+dK'C0%:mBbaOFK!WTUFlr@n;e]k*eu/BTt+g>I^=u=f[lD$B]</
%Tk"n6U*;p$2j%6Uq5<K(N':-R.:\=&;JJ%"Sl['kg7nfJ#T]Sh(V\t&3##\rBo\[;W^P5_Z)&q56IRC,!:A/h8hJB=Z4CQoXUN^C
%?:>j6Ah5eQ.P$5bOfU4h*prHtK*1C(K!3PpoJX``Wr]Vh3l7Lh-!LtDXCKa$mCk&5?):?`@KJ01*Y)6N3%6$kiGY\X1M';"cf&ID
%oG$SO2#q*e8CZ*lW8&DJ>%"WN)!$U+L.0ApJgg6s+OFmJi"CgnN)etd,.lO4%*BaXi$oS.\TCY*CZs.bKT$_u"A8i#r"7q=b&YbB
%=Fod`+V(Y-TJ3&YY(I2iTrt-sbT*W`#*=U0BbKKR\eefk53mQa`rfTl!gs52C.,<O9o9N&"![r_B1L.p]FZP>YX4-rG+'F:#"?^t
%5RSB"+>b\WAE(dq+JKkg`=budZj9e/L"Li_OFn6?p<Y-+E!!XdKJj@=+8ct0&NMRFDRpG*i"m)KNdlQL25/Im9e(TB3i;.f<<&\.
%)V$+e(0*/`f#QJ],XO+25cns569S1I5VusW^DDDaf=`Dnlo,?D42)Sa\B@/3.!/513gOTucnQUhTG2Q>O=/*RHj0&AY=Xg![NBiE
%."$_FgE;[.7CWmpRc,(e`HL=q3m#DD$G$O&+5M2los\lN1$iD;+9V,n'@GBuQt6pY'E[<5a_[]I%p_5e'$E1#I7um,'Wbr?>:T!e
%2:lB#m8tE^Cu,P=6*T$1KR=6#&-T$T7=6,uC,co#12,8rS!i'lW!i;SJ2XePKH;1O382iI_n`5N_o-Rsg2li</35Fgk81atZJne?
%9o"`?e=IhBE.G7W?r1B0VL6a80O7/fZa$5)6&%&_6\S2Vdr9RK_?c9\kpbUkJr8iAcZ:@&'N'Z"5_'-D7R4%Y9qPFuS6"%MUMB<r
%omS<Y6o(;YfoD9-TF[[UW=']DHV=_mHDgfF(Y.H<0Ae.((DNh96ub$/Tq%IMM]Ke+4fuVu^(QI_q_n&?fE$:K:J>Ehdd@.S&NgGs
%Y%.:2jbddQ4E+,+3^;oGl6n=kVsBcsQX,_k,oT:i9/"Y761u'"-<XR63KD!R;n'7B$'=g*^O*s+'f/`(AMocW[4-3j6;o42C?AYQ
%J\=Sr:q2^^L4$Dk8<@O4`"[bbH#=`f`I!,Q*'.I-M:I-_l4k"bUE!9s)&D=Fd@2p@Y@\X$gZRgi763]#`DE#)UkiYu=U1E>:1g<&
%j\ZSda^'chao.$S#GjEn*j2L,no2R,Q38Ja,4W$*Ib@uN#9/SNJ2X_rWk&3AbG@Eg^6"+cC2!<<6"!ZSUOuc_4-@[^RP4;*>[(qV
%6j`27/ZIC<\O=8PE$SVKV8*]a3aZVGa/#60Kn4Pil4-F%oO2HsUgct`9oU['5Tto/dYo[rWCA3b*3#AP:a\EA:i7].*R_S'EWjI>
%!@[*iENguP9LniB?3+\LkU;7+6S17"@EW,L/T_!>[dqffWCj*>$olM[]g?P.K*Psj![Q%'d"%mDdh7rfJLk*\K;MaFr-2f-9r;bn
%\FAb^##uIm\m7YU=/"il(t7fM<'X>]&^UVPE^PiKl9lb`DM3=s[%*&bE^u.qglT$nh3XQE`=[\]P!]#r'Hit(.ho=7<i6iBWP_.E
%#Q4UTZA76kI)7j"#n2dVYlY`M6^dZjnF.YYK;\fM#c4"8Es1Na2J[GL[)`5QB\\i?A#8!H7So@YQ8Ajq7uS#6Q$W[VlOh4''%HG?
%W)KU9[U:iZ!_oC6+8nm,XF*=5Y*AC>/<bbTBtfgEStKH:'7tg(+G"o5X@1OFkZM!0*E\9H"!&sm<jVnK%[$08m>/S890tMP%]0pf
%^>nGZAEje<)m[QngeG=k""eHI#d$m#_qati[Y^-pf,,22Kf(B(?"`E;-cCcE3`Y4XLtN(O@^T@;Jj=='IYmKu=+muWNmIZ9VO]V@
%E6VK99pQ6e!=f+q/8*A_6))9WeTEXGi`6X4\kaLWX="8:Y(3mWq-4nmaojSC[QR3*-`$X,Phf*f[]&MYG%KI$[WJ(GIZhjCb.:k]
%s%MCjNRoijJWqmo'mB?XK3`?IBC5_`UEH.&3>KDZaESd6+!oskPhA/pqE7h:][QkBb)8kP>J^D6\RiV];u(@C/S$`i[^%P*QUu3a
%TFr]:>Y^Mr9LQ9?WAZe;VQ&!UbJZ5,`$lD:N26J*I$q@:Y&NQhI_Vhsei4-DFs!"d@@.T#`hcR;gXG[',Q)Ini?dT-S"U^N%^]b<
%]!n[3'@']Dl*sW8JR7k@l'T'eO3=PlKL-:^-8h.:;AfqAd"?%\=_;_$V-6;W.&2D0RQ@RuV2::5rZ^6oZ4[k[KYlqL==4FpB"V=h
%78&m-Yek'S>LsYA0ScQ?Y[u)t4a'CN\$*7*($<9R8]Vg>,Akl1jf14Y<OVBFMclM"A*f:&,J5>*HLom@r5-m&iVbjLZ"?N:Uh3`i
%/cp$5MmI&(rL-1VG&BE_AO310jTiUt#8Lm/\dBN(nnj$]6W:!$$O[ABn5Y/$2Ha"VCJqA;JY71'9;>I\$g*$-o2&+T>;B8f0_=KT
%0#A4J(D)X6#k^&"#"=V$s)![D;nb0nQ'H+q,H,!HM0gUDWcZbM9gfi&E(GUkffR78FWJS`KVZNg2Zi@r_\4F;=Ck`36;c$\6Ig5N
%77\p)#5c@F14=29!<gC`0,gDcUX;bPX_)!p-A;fZRID9<:[OM2K/0`$Kc=tlmqm7H@D9VQE76]0=O8dQ6FUoQ)[?":qB"I/K)I?_
%06RF2Em[Ih0(0"AE\4gCX<^;t,q<k!C?b44Joo<MkD(u0nR8Cg$<+eSDdB/tF\2l0_<P\I$_"B*Bi#Uh)mD*CBsKWd#8#(>'akNk
%9jPXP\75RF;s$UYi`[V"mr"9+O?'m16S0pH_d3D/mg-3^P)]N_`Mkq<BFM-TQB""@*#Wo&mHO,&3LEI&:rgALd?W+rjb%W4+?1c6
%M%RJA'E5%C)Q`$3+P^Cm(jr2)AYs,cD(sm^0cF*)\YA9pXDD5V[=U*=4!D^<dst1f:-@/S=29pj:t"9Fb$\6%\a+o'*3cf-']^Mi
%hISKG\$;mRi^+@:17/(n%(XM)(*0HMFY#$Y7E%<HMZKbSL86989V3dq,ZMu7Wcd95n094*U/!Lf'gU^C2D1K"$oO%TiT_C]68044
%Dm<$ddfrlcR@).ID;7t5$<(`H9d%L8jM/mc(OFZO/f-SR`PkYD$tj)?EQt?#_3klgTahFb5@<Gc@NW3*%(R:/$O:dG>PE*08"L`=
%KC.rM+hRJbWF85b_c8U(Dr=<>c$\paUY7/WPBodWSgYca6?`e+/8.HQd?*?N$sSmJ_Sam6G1$Q!70ViEbuK@`)HDL5"hGbh8S9SZ
%OLbT4UY1mj`k?Tkg'O+?pHFr1Qrkm"g+X7A^nFDR-##!'"W^BTj'AtEo]3^gcng'Sm3X`A\S*$u3mUTb`PYeBQ`4JUMEtR2V[MaE
%5RJE=&Kk`3,roPGQFC*X0kePf==tr!M%.8VEEt5nGV25^#7*s?4TQipLKDXOXulsDo*?U\,ELMd_2HjK*YAtWPmRDJNg=H?$j:>e
%.)Vk'DNf&pYrW.,@rP;!5ujY\_+Z?!o4!'-+;`Y@`ZD0U&A^_RW].2A`CWuk3HKR0*eoK5`(a$F,M'OgZku:]32-iLb<[9/0"0NA
%J>!P8ECC"HX)!@1cL*N]J<-#%jYM3$et9_a@#:Xo$g."7r<a+.HNE26q7b3eE_Bh)J9a%U4QoFG%8iC@VBsCCa^0[&H<cJ+]E7X;
%CDM>u(r;udIS-+=CKs"a>&]a7VX*J$]R6g)U`q@\@[mR@9X,PF_:<qI.1A$G+BW--7LS`:EXHh!RWH]-Z,6Vpi.u]Akc=b$#q-n/
%!?_80;fE(eq@p6i=rpNmKk0D9/<2R\>1sCm\-NJ#os"?qk>jRB.eM("6kJjZ8&p4(N@&IQSW-41,$4CfqPe.<#ZB0ObL[qb&rqr:
%UAKV"aZu[L:(+P;b!8J(Yui.!FJO)AMaCuWfKJF3VjOn?,bFFmNb#g;HE96Vgs]M'<F`E\2ZXPUas\eT;D9&)C7hLE$"T^?b<B*1
%:+5!&3#Ts(!n0%p"WrJ'!k+udEJ::F3)('`9RMVD?ZN#+$+s_uba@n0!+H8R+n.sI66YZ`@Z)5O-c&?Ed\$`]&<)ZgGK#"50fu`P
%K0!MA0O0L//7nrp)\]'BSs`id2Hp;:pB]t"0P"HYFoq9"L1m:RC8!HK$>`CX06E+E^BKF.:QX#/H&JaPS.SeR""c@(FU%YL#2gWn
%P'pX^kSTr:',Q:[U,#_9j$54D13Tm#,&WoI,H=bb@ODl"Kh4\cJ0eCuaSt>pLps,\GJb`s,%20f$XO5R/>f?5Q8lbN##>p:MiGPT
%.>nYGH^I)8i`PP&.nL9R1d@)._dNm%QIk67HQLGo)j8N0&:RcHU3%h8f\drUQb!]EOO3(:JZcH&hDF<L0qu3=Cj0InTBa>aoetWs
%_>Xn1!Z3Yj:er.#^^2EtrAeC3Un@peKnXfdX36_"I51i`:b2e>pi_K2'FXAH;W8Ch[&'ZCQE(/.<krEMb:u#Vl=/<I6NE,qCPD#E
%/PET:@2VqD.j$o[/$TKL;/]Ac$k*Fr!R(ZT$sS]+=q"K.(*a:+C1B?5<EKp84/in/rXCJcN<:tP%mpE,jZ1hh$LU.+KB5'2Q1"a3
%\9&O?'8r/Y;9`PCok5_'d(r+HU0SiNc_@pV!iT;$&g_NjS\]:bO:WfMP4"Ps0/%(Xaj/cb[1\SE7,J<DC<MiW(AG8I=Nl:SgXm"d
%/D(GI=/7lO9.'-s-a41g3K-uc#CF<6OEB'-Tc%4i#Sp@F@s6^Yn#'d:JZqlheATJ:.c3I*XXZ's;lX>i+&*=q"4_sN(kQsK7s;G<
%&!%:HY[do$H?"g4bK:.Q>4HVS.THLEjdQ?[kBMUgd%GcE+1<L5/;S,RQ6OmD('tM(m_7%q\QBsr=$X#(J3Y)964fPNL_B6=@:S_*
%dlAlZ:`jg!%n'o%QaT,00TJfp2-`*6?Lb*&3YBkaH(Zb0iKXYi-0s4!>?2p\&g*L$FNoDS3ICi:>.-hY)I@V%O2&6a%8e+DUcfW1
%.I&fYZ""W3&,U,*Frpiq5)LI(2)V+>JSMa@NuFP2[QKT,,D]W<"Ap1'J[iH05RnQ4LhH6I?c:F5d()jQ?&_5B"u[=V8ds[qA"LRP
%iBI=2jHX.KK1m=Cle$F!7lcI,Kb7q>":2W0THXVPe%o_]K%hL.A7EM2)69@Q5oJ=d-6He[GB>`!BV=aM,QcML.Rqr[=IQZA&n6k'
%4?sI,Kn2B:3k9u'8,TXZc>\Jkb`3"hmqA"Y`\kA&Pl8W"1@LC*a$;C:8%p=;TP/!8j9)V(7(%Z=fQ9"Z%9GC>Mpi9C6O^B,ZQNaR
%PU>RWc%H5c*)fVQ%Pa'E;b7!.Le%rL6BRqHWV;M7]fIqZfJ$a,fJ2EV6\/^ePL%A_55YQu_@0*""+`:9ok9NQct;cP5A?2r2QgBe
%iDb(A0M$q<3nOUVoaDe=_&M?6ESMC+gLf%0q#VS@5##bl5lZIS_=47FF/7?#7i.Ff>fJY'0TdTm>XQ$C+V[4OIut4`O.9H^P@Xb<
%<L^Q*eR7B46V!H*-nN'9UVfPb1f=/f+pmLia9!\_7*OG;%Dl'\L"eIX83X[1VLYGo-NMTqAJR(r60/tB%l?!CJg#A^EH,d3"&);(
%N/T%(=lkTo75n'd'MBGqK!2eN>eq)lW6tnlk]3H&KHeL1lT#6(-;=.*o+6d).KSXe.FYTAg-YSm"Mu!t2T&B.\7AM]R=pDH6(uG3
%.+0-(Zj8f%Y;Jm$H"b?0!#n2iDkJA[/CU6o2<iC?'H*L=48^YLNJQt-QfFD<&cmKKm!)kK&n(g8MQSfJ6jUM[J9#HI"#kUr%^ol8
%1028'%h?"4F-HkJLicd<6%N_iW6;d%O<%5H,BGl\LUtZ9[;]FFs2=#9/k3kE\h7E=lLHuKnOM1$cnR0":.%/rb0kOq^+tqS!)R*m
%Rikm9VZ.p?bS6adSs[mCD,@m5PI`3G_7H#80nd5hC^aGiaE1G%OJ$rSeYKFO-?1Q<7TqXOj`k=a\S*bV7;8>hG6WRXj-&(;eL+!u
%./mU_Le$\;b<kf3aA;!K$sn0k)9CWU=VFfoiLL@d/u2q%UDa]V,KK@BJL3-\#XqZ\2^mB0$=l"&'uU[#@T^:(E?pufF&"%G<:Y!m
%i)E8"ZlE*SCmAO4aT%3nW/KT18Q=qn!0:6HN@r_.L<Vb+FWt8eNi(L@\2mBPVE,JSTUp3f%^X7R_nttdS]t7?T:sWXn/:a]2(u:`
%&<BbCKV2G[`jWK0fMBDPV8C<?4H]:@'J,OoM^5Pu&s>gk>F&osa?_>56X/&^6oJ:\3$H?UP$?N`701o8lnR@Oab<+7J7@h\rct@`
%Dig'0BI@gM)Xi6_I#\qG'^S0ueN"e/".'9KHr5HF:s.B%'V,d:Z)rp,"!d4>@e#K-q5+`fCPd6P)DBDnm1<a5_.lk+NBjG(KEE>R
%.lOqOVG/BkGX_63$Vb6(5T5ut@cS5_m5eJA**l&A-(P?s\$4L>j,/;H_>t4/.QiEd4/$gZ1B*-IMc"d^$Em"b4/nc%Kf>mufg[rF
%)(/8>.B5-/l;U,#+/+-?D+nU0m>PI#%&SsaV_I]tp7P6a/k)lR8f<)3Y^-*Zc%VrEO^_!-F;1Gu.Ds/-_od4V+t/QcCd04lPg/s3
%<J^m>gnnQRfl2BelAqop9ORq!!n-`Dfc#LedR4F$PBC^ukGAk]<T05k&ke,C;^P#RM5sU1Q6X*-6uF@'Rou4Or+AW-g8_5SW]3H0
%IoKRF9KHl]%8<d*-34KIC9hD0R5N/3L.o:4W+&;o6UfBg-?#p*Y,8P0+uPi>D32<]F:Ent;BiG8Z1`"5QDjAsQ?4S@^/VLgR0gbL
%4@A^"&Em$Z"K!?`EQ!pckdnh-RGoD,7iK_u+-T:7[jc'a9%d99't7_r?iYutbuX+DbhFi'V1>)[;$-@PW(aj:hK#pK=D:(0hLJN`
%TH!*@"\WoQN[t"(7pe+V4_.`d$']]SDM,u#F*R(#-.V42g%Z?J=E&,HIN_^DV68%b<,mci^8dbN;u8<_l%p>ngIl*i0ET7,c/Mr-
%Pn*hpXI(b;W6?rXM/Cr1oM,\:Qb`KB8^.hb?f`1qYErlmVKgVT+CumF<5ph;/H7hF"^WZc%d%4L^F8il3ZKaQE]pSa8#seo4KD-:
%)]YrbpoZ=S\K]TA6*UF*'*W*]0B1Ia`<m+_@<'t]-OVl;6'LC57[5R.2FJr0Rc4Pi1]r_NXQ$,b'%c<9BsW&Ks(QcnX\l5U2Xrt,
%>o7M.6q&4uO,uFmje2[JM^/j#^)]NGUG>%_C)jGp$86qMdTMWH%t-,9d*fdOC^u>lI]R-M2[*5a22*?bpo):\R_C*8f^sL5s#Q@#
%pB6Yg?t*Oh?=6H;@0t*q\".mp_reb#M:NW".h+7ZkS"OT?H?j'G_V<M*qf2G/Au$Kc8/Vb@i3XN^:YW3J.QJbAQU#9MWm^WTlMe&
%X6J!W_F>%g49Uor0Af17&_<_8N8tmF@AZe3Qn,1/'t=TnO47i@3Z0U>`+qY,X+RAF_&FOK$Kh.-aZGmGN3`^R5RZg*f"fJR_g%k&
%g]E(:]dNCnfnO`]Qg=N'qY#'oa>+hNHd6"=nF_^h83ucEr(mbYmORdg#jT:mUsGK;Ejj5Vl7Cr1&eK%5".R1j#.Xqh9Nh)Qih`TF
%,E)9K6T8;T5KVl^P%1L*F%m6ae$2<,^H,lqIC*Q$&N[=/j0KYH6l;AKI3Zf<nh)?Ar6H6$ZX$hu8a_DSpu>)3'L3hY6mibldLqdZ
%;]rpj5lu^9QOp^8*gl`"i!,Z[79C$gL,Kf"UYg\J_W(tYTJjBm]ZcKYY3\ZW5oIJBB`j9Q?'Mft5Ner$>U)150EX!0kGjnq4B-%%
%NXVf5Ut'&6NJgq"bE=3SAs&1+_^0#Snjteu/p/mil[e/SK=*QK[Ri`ZAePi]((_j2'AHrL)2it\1Pf/<X(rpE`AH[;Ec53kYE8Nq
%MErHtRXtf%SO@B#Oaf"f@g^N@lM>Z:lJR5\P)E&;G!i3ZL&=3_L-QZhcq2ebIt1Y2D9G2<0+5Bs]K-N;SF4KcE>L:6nri9=XQElg
%\57=a.JTJWHs\W^8/&ShPR*fh&@rGY'13[mR`Vo0Yaj>RW=V:N_OB4<9hq*[Pj:f#X^QBN_]gFJ,64N2P!LLC+eHXg&V;S%Pjm%\
%`FN!N6lf`ZITAd4W+_^*(0-)Q#,4uQ!+m.m0AhjC\&=c#(I90FOmAGMI/q^;,g#D;A=SJ$/T.g>g9<u8KB/<@HC]+c/35L`8sc4!
%<OpbRDM_88$7Yb%1sfj3aZKm'`kV:Q"mqS?C\d_49R,SFpJo<%DPs0TjlmAqL*9OuQi^ej@o'QX)aO$Qi/FO(LJZ!RN'amsd!RO#
%A@9=*$5jS[)XrtGP)^Gf.!#6i#r^A0QLZRV<(.m56oBqMn&7AW9al^oAuKZ'TT%u,L5^Gu$,jV49kiT%[]d#k,4V#\QJJM95A/1/
%+Me>jA92;j$MkfX;"X5P3ctoU(8Mn3eoXW&!%T1.1ZY+uko*5_R[%,HJJP$H;h5aTJAF;If!q%l2S#7bm7TMf\P0A^@`oIg"@@s/
%_1X[n:E!%DmF>`p^nV:,h,*UIr$53q1dpC\!;H?$_6\-*$!q[)H<;TN6Er'uTK$k(M<lQ@g@gMX!frs]3J5Hh]8[#->DRJn'?"JB
%`QP&/=Q8B";8PJ.*/[ZiR>gp#+^(Fh?8M*k*Yr[&.(o(@nZmuC;Bhm^UZR$r(47oSi"a6$kZ6%Kd0O<Q*C-4YnOk]VQJgm<_4@#C
%-t$tJT%0Z39g4WY/t;<&GKCH^$_d,j9Z`33TQEg;JkY"Zku)<r=/sRYZG_WXCPX;h_8Yc"''1#uiHPK^-lh?6je\fW`tqqd]'$@J
%p6RM`W/#4>/tJUf]K&VEg>kp5O3qKE`!bP&[/tW)gC`r;3&V@(Lm6H+!K^7>$>>(O1LR8';AMX=HuYIFj7FEK&/(7DGo3=gRZ8&.
%5.8/:b!sskb__`OB2!;BAe2(F`sWa@r\gJmRET(4rUJ'7[P0'dgm1XTD*l#h?+2$o92M8P,eiJ_7>kC2P>eDQ\c]^gVlF>JDp#jD
%P6l8]5)Nb+-/g+2A0ZZINRGlp52,;gHt9goaTb[dE+;BR-TU]9<]2KJ5JfudSohG+#$1a$m6BfAl'/+=77Mi%E6<h0%enhiTsLfa
%gjN1'#BuG1?q&CP[]`T^I];V\9QtNSq`RI3J!BmTR8+A!VAi:99e"6AQ#)A:U'i<u.oRLQr5uIeB"C)nP=qnn1ts^al7:,fT.4#D
%1Vs(]LpV]4h_3duW+m;O[23FZ&<i*2,P,Ik]"_-k@LPr>P@[qCe?*H-*]?Hb>GcDA4=4^>D!F];J+B>_4egUn;H7)"U4#qi@[YAt
%PXc)*OTIFfAHZ0IR!&Pscsu`WU'H9rKg,Kf8T=T00n1f5lJBkJ7n2Z>pqd^X:F83ChogkLpoP)<bmrApN":gW&eOg%F<Qdi,144@
%8"J]*Q70`em0Hh.jHu\,P5F:i[tVo9,(A!0IUc,-<'k)f&N>rMXthGI7+JT"G3N0PrWj]63JN<LO"6@o,K;2d:-kg20:TF-EHM<<
%I?RD^WKU-##45)#\%:C"d2/tL*`%!JO3QB.g2&Pc\V-Z^FZ8.74/*Bjd5%e:/C(Wdd_aQ1CNXQE]")&G'i!nL<cpi(];"t(d3,('
%4Q<^4/>_W0$H:O1at#*M=(*L0bfF%j0rFq8h>3RSP9m0-SMnr<X)?3_FR^i,I5=U6!p=AGL@TYRb[h[oR(7<+Gr:BB%M-Ni+,VR7
%1(m]XZ#FMCPr!t7iDI`;/4_8:oQ?]<]ioYfI-Qd^hOikG:*P1T^%_o!(tXAef<Rf/;cH215.*S6\dTtp<S6t_8,<3X_5ET]b3Q$)
%?<-pl#=H3UW,V`?XSL"*aX>!+Z;;$Ls2O@8_`Bfh%c!&1aiW_gWl_%DY5B&.fTSS+*WANf/BA*Jn_/m55g8b#adu^9\=SuP\P9jj
%FOg'.5]0jq;@RPVZ=Md&'']hO(7u`7H;6`CY3,pE/7XJ\&;N`b.e\aD12NpYI\X)V`nPSEOt9jFJ`"?'MjIm<9Y%]mRWuKFR^3o=
%hI8QG].'XKoWcC`Nqul<PN[6K-#'Ia1coV5ljr$#EK@9[1rI=.qApd]D3#&/2%%GM`0GbAM$M5(fgLL]Lb\7"'e9qVe&W$N`(nH5
%irkI4LX"KC<TU<%#/H:>=\LAk%PgD2mOd-6TP_4rS\dt^;\064%+0\qhfqMMj7(m(PU<e8fn70"mlhtP1N#6c@8Ql"U_n5*JFEYV
%+pMRS+X0'BW?)CWHh=ijKNPt.H#)/U%0l'!;CnQd#%<>tHrL6"+50(rV.69mX)hQ7$JBHEa;dCmnT3cO05;6kqL0-1i5&o#2?iMb
%M@AfqjWlna.#tRMPbnS[jiREP?Rpn.3$#^hNLO\(A2cNo:?"pE.sror$j,Ft&Eo\W%1NrHi^jCDTU!2=M=j>oQuiKo*f5HQ9p'2N
%r&-j_"G02So#q]A;eH6t86tBnHEKphHQqa4bOfoa^q!]-Je4IeHLtCR\(G_q*p2NmWgQjr.B&3oHE?B<B_s"E9$%Ab&tad4QrU&t
%^pL9ien@lU!>,Wd6([CEpf!JL&"oM!RZ6cl5_=ObO?#\j>6NAkX]4:r0_oI.M"0S9IB[=ZYnKZ=Yk.(%5tdf#9//,P\is&V`^5]l
%5aGLs0oq*Va-pEsJ;Lg_S\u!-J.DI-AuL_ABqE4n@@ct.3e`T96dh0tn^_)XK>Ud`RIn=)"E>8A63Y8!L6Y)%i_^/'d;_iS0VE%"
%OIOMHfJBG:<+q>_.[eo+`"47T\aBG.:_t;XJ0&!gMt2GuU@]j^4WF,83>HsVO*W+6RQOYn&nsnD[ZEe`c09ZMRu"@!jf>)HZr2:4
%X4)K+2&$Vs+_JYYS-T<"D,I^56<:=ZjpAX$$p:=/EPmhbiW)#hWRd_r$XnQm<TPJWDER27"G$l_bJFM#qflb^LG_,]b9%YaF4M`G
%lf-aM3n#*T!?mQ0kR5'02(WK.^m6UFGM9rQJ5ZD&X$-r6)1msLX-oe?0X%\'7V?!hlVNjI!p!cb[P"1`WlAGL_ln2G13G9YLL#gq
%XbnTZFe?dC3j6a]M85(-T7QZP;5lf4i4A)\re?VBF=B8rBpiE.#DZ.gLr@@rbreI4!t:@A4"OCMURZbK2n3+&K%J@2@NBQEY[YE]
%':JUTF#V"+/%LmuTVO5_\tRhdOQX+na;9.,\&T-G+=qE*XufmM:)uN,q$1bq7QoJQHTe/`7jc&NX/Vt_M4BU`[ub_^63s;=B+jJL
%Bcs\>BP(4rK+Rh6OR2-k9ZTJkS4H&Am5mX<EF5%b)GX+lKVjhC'/)U2S7Ru0@kh3.0bHaNX@+:kT>=m5')4JA+U,AaF1RR9.ZjHh
%h(V8qeFSAVYaq_gM"f]D?7o;Y,I)`Koej<62MZ%:LgbBa/6QMiPkCBhfc;MM0N4eqNfXs3XD-!gP!K[3"O2j%)Q??79FT41Bb#cC
%G,T-$)+=d';tR:T;E#%.6TIn-)$+I=)7FE/Q791d=h1!f1,2rSYr3s4FS[CKR2u4U5+[>K"&NI\\g'oo)(ESpJMaA`fA`eC8qA5*
%,b-T,in=gG_aGW=\gC*&dh$p1XDuUo'1r4;]q1IJ=Y-jN*X%&UKn^@W@/Sk=0o[62FC\jEPJ;jqU[Y>#U;7A*1A17$=R[jomkZ!%
%Ohr?BW$Pf;Q#!@R3GKXgN`+;Z3GR;[SUt1^XSO6`$pb@m6I9ZO.;oJhW_&n;+.6^NV2NP,[UKXo-$@,dY&#3I7j01\n6$.&LLtNu
%cXQ0.ME'4cHBcX:A\K2>YKXNUBr@XW?/7ag@3F";,7)X*!MZb1#ZnpQ$t3@d-u(G,9GNl;LK&h7_7jSLX'2+Y^dm9NaD6`q@<W9/
%(@3&e86L[<[^5K2B13nh(8e)TZm49t(>$eLi^Cn.UsJ@/Al;jml7DdR0WS1l(a;buf/3qn?)gC)ApA(uI`bONrho7'(#,FC8qsgY
%fN8u$>-U_(!90DQfGVgP5R;IS>;7[D$q5um7;?92.#%^Bd6>\r?h2B;>D0\g-5M40ie9j(<!OVij,7/1]FVaZ5UMA)JAiq@'C2/7
%`^6=Mqd_8bLc*tVoT@tn.G=t/](.:FWSm.lZ?_c]TLc%ZP:q+^j+E(0qL^e8KXl+fhHJ,h#<t''>g<X#)2c"M%Zq^_?)ks!R8#6,
%K>l?.0OtS.$u0llW&*>hq<:5EW.Q08^1^[Z48gl[Jc8)_)h@25kN:T&M`Q8QNBc54[Ba$:Iq.*9,"ZeXmfW.lFd\/\7D'l9\8#%e
%.$+qe=Z!P28?eNp4i7X*]u&"L,<W#Q5f`TDb)E6R5:kRq30gOSb[TT2)H'`8<kOpu?"KkL[HX#`M5?ANYI_ji-Fq7mUdE%LbfX$e
%/GB]]\Vj&[GIASc=U]8(J/N:Wc=kSjYf'V&NAehc<csk4('fkX89C:8m$OY9K!2lrHd(MqT'VUe9?]udYp.>Kqjg$Z6"mQKh?(\<
%7!u(>5(YX5gb_m8ItXAKa!@HrZ[_g[7[-9tf%'+OJA-L7:bnBraqi7!1)P"pKdnNp7!Q#?;l3H4+sMTK9-qif$!(8QPuKNt._C@2
%L6qS+Ao96XoR:KJ+cuS=XS;`(m7K30,5olq]`"P#oHbd`jU1lGm:tJ(XK^;SBND5SV[rkrMCuAC"J%Xl.L[]YSPA+p\YaVTP<LpQ
%eq,=I((m=>QubjLF=5TtdNrE;6bKUh%]Rs[O<ft^O<NGF9VNf5C8p.$?uHT_!8\%h&)OP,=VcO@JRl>&N;93jKshQW/d<Da<'uP*
%R[j]EJ/Zb0TdoUBEcPl[X\!">0mrt6Q(rI'k(CBg2"12n2C?PZ.O-`+`$]iGVF)@7NSN74;ajh*X3k3a!gr&rP\?3rP$q<iR:K)"
%UCY7[QDs<T-_[/IFGjSOU*5i0-,;*8Tkso>nR8ub_K>5PLCP'%K1h&=*YEjsM&)oqjp$,=ZabPWa0_.h;kudKPdp"_0>bh.)#;$6
%M!*5m/a_)dKr2)W5<IL$"tAWoC2*!K:+-Oj44mfHLsgg7N6mcgF"iK%&d>&Yp)ID@R!*LK/SGr;)%@_)`'e<&]g)VN'Nm=Ck[Tp&
%@R_Fsi/f4J+FtJ6"Ja],\0AF6X-s6!6.pOSEYuh>K+iK+PNg=TT$,FNRMg(G$Yctk,lgNmmG2CW0'PWc&C0tH"ZfP`T"f$'#"YH'
%[WJ1?6cqi5po^H^Y#`mKE%4PC@S&LcT6%@>A^h/d8gkm\Q)s#)X3=L0fU(0n!l?;@QlFV2;5%Rfa44"+5e7Hqaosjcqf&e-%Dd-W
%Nm8;2QdZ#piQ;8,#WE"=,C<\,Cd9'Q^EaP."CB"%!']]5)-LQu!FQ4FZ#$Y_&%r=fQC84'=4\+O?p3:IMH0`es2B"H3+HX/4!$hS
%3'BdTp%4g+d5,)+2[Zt,9hF'>d#&qj/"J%[G'siT"X2)MC:&HRqh*GZ3NuHja/s!f5\D)u:i_uW"PNouN7Z;ubKThA&bsP2Oc97W
%)cZO(;]$*kmor>%:t*oqFU02d4eYEc1BAD*/qZJ0d7Bh"0\6W>dZu_`b<p?55QT+&Hid<c)4[Nt]?=\9kWsE3q2*rFMoNXR#1)$h
%&Ju`M=Vc2CJ%63I0SpW)&Ob]RNrabgQ@_Hf(F0ul*Q1i.^U8bjPSeo6;H660H:6TPF*`[mCoVQS3YaM]84c9o]>W_GSs"Zil!Nnb
%ib2N]X/ri"P?MK)bpUfd_,/QHrB\LF]9%U=I8icMNCHRC./Zo'L?o\iEj[t"?%jG*SU!B:'/l.A!.u?E+k=1co.8i&G-1(#X.ZZE
%:ehbtffYk;Nubj7Z5HeXP(8p5V1lPF4RJ/t!<QG.^#%,52)H6SjhIU!WT9NoOK.Rb^9C\>LE8+hj0fnebj'=)8^N'%6XWt*2Wg]W
%cb;5ce9.]@eI'2Sglb\4J0*+HZo>!tXac')Pk1?t32*bR2OJ/0d#C(i$^o#=+d<i-Ms7B(^K>^9([#F;#A<6^rKE9AmVdt6_:C6$
%a[,id=PglQ%IZ(f7:m5;rpc9mMLq@pP&)`EdXen^?Agj^$;Ubq57qCPQ6mo0pMWUp\4XK%<lW;._Lh&&gagq\8n$)bEg@IXJ#F*)
%-[cg8LBh4`("m_K6aGLf9*[9&oaEe#W-TcOE1I\fT9+\T_tDj[3aXI?c>ksq27(R@TY]fpi]>aU;BnPa"IbJ@rU7DNolZ_J.%=cS
%mh?K6Z__a3!\skf'<=2YiS5;*$fO(=_+SfIdT[b"lS2MP;/ebn1+1MRhLsojV(c"kj(5uBTV!>Z>otp1I^pE,T%dOQ073&dBZ(<_
%c\"F$C$8\YidU+-V+<!!/-X7P<gY!*a7io*;d@utm1Uioq'g-9WGO!(8chm\3*D(=<@1Jr$AE=$@0&A;WjabW"UTI:(X$A9^3ik(
%/g3>Bo(u<r=6QmTWIaT`+_L2?&>h-f2U*r5"Bsa&b3D2^p=?)m`O6Q]g2)0AgHFmMC0hBE(&hPnN54(D!Wm(,E2Uqe&/gM6TU%:l
%IQVkIk6IcHXO5-Gp3QW5-KOjqi$CI3#YE&fFX)k(g/p?5pD-u2[;%FBZJd6<*bPCS(PIoH:PC`Ujhk+%oQcM-QQA`l$4DS)g6600
%7SLQ)&*W#La*mp5*@j:rC*^hkYC`7f$nmmLLGJ<b:I3U'P,52&_2j;D^FL]KK'4'>p1$'Q;VW/g_f5gF<0WDRV).G+cKJLT&jbO_
%$Spj(,#OI:iQ44.69-C.RG)duGSEJa6`U[!KK6HQ1Q42L4(0#I10cn3#Re2"7N5&,ro!!78OfsifhC=i?+e1-12C;#=aRu.^ejl;
%6Ho-YL8=$&`F/:mq=c_od#''icubLKI:D,+l'jb_Btm<F-V1.qBGBI:RgU."<$Ou&NAJ-iSf[NV8hOD)d$J*.-61Np^3m\3U2$pD
%-gk=$ZN`oSc;j:4UV6q,E=tW^;e2Z/AE'Rr4PH`\fi0/Cg[KBtfWgp7)i"Jkq,^Q@V!stmM@-b\k8Q-mfMJ%JHqG1+Y::-#RF[TK
%GY,tTD?RkBfu:JN*JoUJEX_tW.qSmH9#ta`mF33j\mc[HgD<TTlM':9?=U<$QYd##j`hJ_AfGR!D6Z((3Jg5u]]Lda,IC26ZY50M
%pF<[&j`Ha'8:c085_8.pctgmjFB`lV8W1F`WOjR@-[q1aEu/8M02>p;+G.t@0CIb@eke-_O=I'iQF[7JJl[[+0FQF8r")Z?XR8qm
%:D.-T.sj<qA>1ibhsVtk`$?0h7`Ge_4H?"3*I&M;,LRWSQ*FKPi4?+"Q78.j/ZdYD&L-L_6j?O)9%I_QUGP954!.9gn*5UG5nQ&+
%BeXbh@#-!L9UWFd4-a[5b=*9lF>B<rfG?u@8mnbq?qn`$:4@-WPFDn:*?*sSEuEK&gTE$-WA+mleIiK8R;H%:/fEXt;79ikg-NO=
%d'KGYH=`8/&p;q>oeF7>6?B?a')A3gUX&5.D].gi0ad1B&5gCKLF`6odrp7'`oVq1]MBG+2N#8+CQT?^ba.5%<TD%+KS+eQJV5<j
%eu[,n-&*WiNiEa$H[T!PIO'U[B]=H%asQgD.30O?9i;NLG[@[EJGr+b@IXEEgF09s6>.W\K'NmkWGm05r;oR:(Ai"p;K?=<?;^,n
%lj7nY/E$/RLj'W=1Ye>D%M;1G)fYn=oq7ld!phB_ElR-J46'1q(s"]C$^FY@OT6,WYW1bROoW_U';>uAm<5:+1o<QXU%q/4C)SM-
%WB5(f/o*X=h)o"*(0i`W`Id?;9AU<G7sHRqNp"504OG(rJ"S2jqTCc5r%6&W*"Oj4V0e6-\-b4?Ijj,kJ1ifQ8G?#Jl*m$aLAMRm
%rcPtN%6cX8&Fc[/qaE2&]JWXu*Ob3NF?V)8-Z]Z<cA$h+(S=[-_D$Mj!H0i>h+jn?K0p@):gg>9`ku4p!(3C.0$UoS#YDo:hII_*
%%P+,84CHO15QU4aHG``.e"!@A$n^/C"FK^D!"RSG[\JPXdWpXI;)?0?J2q`fkH66`dX,]@1)CgUJPD)J&Mui#%-Skf2Xjot#T2BA
%o?Oe[ofCE[PI_WdLD[N]IirlP.#cOF7qq'rdbQJ(%<%s;`oC*S"9<j'6/X\Z*t<Ucf(9k87$iYlJAXB<8WkB8'$U'mE2V;mTjBgr
%W-^_+jIkVnV]F_Gif;XU-rikamM/\tD^QNOTfn<VI]s[D>*CumbRh;'lQ3DZ?Be1J]GG;oFGS[-2<ppk4)9^Gme7BU$Z/DET/J'>
%;[a>!;2+aume<@YN8m4XJ0jVY$ftECiG%U-]W_uQig!]Ed20Ihb@4HeV^!>lYrH%3/tu`XoQlj0ChcTorJX]A$d%Z&Be(JVr4T,6
%3,*]n-N^"_F-cD]2'Amnr&S*8"]Xt>d@EX+Og9`>3j0Z7_81Pu5npAVm-nLIKmrSR,nXSpF:Ql)$IPd_)nlF(E5+'8cqX#)?$BQt
%e*A)>Ie`QaTBb<`rpn8*jhJ!;:JXpYkq=]^?iTuro$:ZMh`cMar9`UTf?;@(042K/I"2+hr7C'%gZu?;?f,0Chu<0=5EOenlNa%G
%rVYhCIf/\"0:Z"$~>
%AI9_PrivateDataEnd
